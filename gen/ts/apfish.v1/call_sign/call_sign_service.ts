// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/call_sign/call_sign_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CallSign } from "./call_sign";
import { CallSignSummary } from "./summary/call_sign_summary";

export const protobufPackage = "apfish.v1.call_sign";

export interface CallSignRequest {
  id: string;
}

export interface CallSignResponse {
  callSign: CallSign | undefined;
}

export interface CallSignSummaryResponse {
  callSign: CallSignSummary | undefined;
}

export interface ListCallSignsRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListCallSignsResponse {
  listCallSigns: CallSignSummary[];
  total: number;
}

function createBaseCallSignRequest(): CallSignRequest {
  return { id: "" };
}

export const CallSignRequest = {
  encode(message: CallSignRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallSignRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallSignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallSignRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CallSignRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallSignRequest>, I>>(base?: I): CallSignRequest {
    return CallSignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallSignRequest>, I>>(object: I): CallSignRequest {
    const message = createBaseCallSignRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCallSignResponse(): CallSignResponse {
  return { callSign: undefined };
}

export const CallSignResponse = {
  encode(message: CallSignResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.callSign !== undefined) {
      CallSign.encode(message.callSign, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallSignResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallSignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callSign = CallSign.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallSignResponse {
    return { callSign: isSet(object.callSign) ? CallSign.fromJSON(object.callSign) : undefined };
  },

  toJSON(message: CallSignResponse): unknown {
    const obj: any = {};
    if (message.callSign !== undefined) {
      obj.callSign = CallSign.toJSON(message.callSign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallSignResponse>, I>>(base?: I): CallSignResponse {
    return CallSignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallSignResponse>, I>>(object: I): CallSignResponse {
    const message = createBaseCallSignResponse();
    message.callSign = (object.callSign !== undefined && object.callSign !== null)
      ? CallSign.fromPartial(object.callSign)
      : undefined;
    return message;
  },
};

function createBaseCallSignSummaryResponse(): CallSignSummaryResponse {
  return { callSign: undefined };
}

export const CallSignSummaryResponse = {
  encode(message: CallSignSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.callSign !== undefined) {
      CallSignSummary.encode(message.callSign, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallSignSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallSignSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callSign = CallSignSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallSignSummaryResponse {
    return { callSign: isSet(object.callSign) ? CallSignSummary.fromJSON(object.callSign) : undefined };
  },

  toJSON(message: CallSignSummaryResponse): unknown {
    const obj: any = {};
    if (message.callSign !== undefined) {
      obj.callSign = CallSignSummary.toJSON(message.callSign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallSignSummaryResponse>, I>>(base?: I): CallSignSummaryResponse {
    return CallSignSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallSignSummaryResponse>, I>>(object: I): CallSignSummaryResponse {
    const message = createBaseCallSignSummaryResponse();
    message.callSign = (object.callSign !== undefined && object.callSign !== null)
      ? CallSignSummary.fromPartial(object.callSign)
      : undefined;
    return message;
  },
};

function createBaseListCallSignsRequest(): ListCallSignsRequest {
  return { page: 0, perPage: 0 };
}

export const ListCallSignsRequest = {
  encode(message: ListCallSignsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCallSignsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCallSignsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCallSignsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListCallSignsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCallSignsRequest>, I>>(base?: I): ListCallSignsRequest {
    return ListCallSignsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCallSignsRequest>, I>>(object: I): ListCallSignsRequest {
    const message = createBaseListCallSignsRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListCallSignsResponse(): ListCallSignsResponse {
  return { listCallSigns: [], total: 0 };
}

export const ListCallSignsResponse = {
  encode(message: ListCallSignsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listCallSigns) {
      CallSignSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCallSignsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCallSignsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listCallSigns.push(CallSignSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCallSignsResponse {
    return {
      listCallSigns: globalThis.Array.isArray(object?.listCallSigns)
        ? object.listCallSigns.map((e: any) => CallSignSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListCallSignsResponse): unknown {
    const obj: any = {};
    if (message.listCallSigns?.length) {
      obj.listCallSigns = message.listCallSigns.map((e) => CallSignSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCallSignsResponse>, I>>(base?: I): ListCallSignsResponse {
    return ListCallSignsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCallSignsResponse>, I>>(object: I): ListCallSignsResponse {
    const message = createBaseListCallSignsResponse();
    message.listCallSigns = object.listCallSigns?.map((e) => CallSignSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type CallSignServiceService = typeof CallSignServiceService;
export const CallSignServiceService = {
  getCallSign: {
    path: "/apfish.v1.call_sign.CallSignService/GetCallSign",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CallSignRequest) => Buffer.from(CallSignRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CallSignRequest.decode(value),
    responseSerialize: (value: CallSignResponse) => Buffer.from(CallSignResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CallSignResponse.decode(value),
  },
  getCallSignSummary: {
    path: "/apfish.v1.call_sign.CallSignService/GetCallSignSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CallSignRequest) => Buffer.from(CallSignRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CallSignRequest.decode(value),
    responseSerialize: (value: CallSignSummaryResponse) => Buffer.from(CallSignSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CallSignSummaryResponse.decode(value),
  },
  listCallSigns: {
    path: "/apfish.v1.call_sign.CallSignService/ListCallSigns",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCallSignsRequest) => Buffer.from(ListCallSignsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListCallSignsRequest.decode(value),
    responseSerialize: (value: ListCallSignsResponse) => Buffer.from(ListCallSignsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListCallSignsResponse.decode(value),
  },
} as const;

export interface CallSignServiceServer extends UntypedServiceImplementation {
  getCallSign: handleUnaryCall<CallSignRequest, CallSignResponse>;
  getCallSignSummary: handleUnaryCall<CallSignRequest, CallSignSummaryResponse>;
  listCallSigns: handleUnaryCall<ListCallSignsRequest, ListCallSignsResponse>;
}

export interface CallSignServiceClient extends Client {
  getCallSign(
    request: CallSignRequest,
    callback: (error: ServiceError | null, response: CallSignResponse) => void,
  ): ClientUnaryCall;
  getCallSign(
    request: CallSignRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CallSignResponse) => void,
  ): ClientUnaryCall;
  getCallSign(
    request: CallSignRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CallSignResponse) => void,
  ): ClientUnaryCall;
  getCallSignSummary(
    request: CallSignRequest,
    callback: (error: ServiceError | null, response: CallSignSummaryResponse) => void,
  ): ClientUnaryCall;
  getCallSignSummary(
    request: CallSignRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CallSignSummaryResponse) => void,
  ): ClientUnaryCall;
  getCallSignSummary(
    request: CallSignRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CallSignSummaryResponse) => void,
  ): ClientUnaryCall;
  listCallSigns(
    request: ListCallSignsRequest,
    callback: (error: ServiceError | null, response: ListCallSignsResponse) => void,
  ): ClientUnaryCall;
  listCallSigns(
    request: ListCallSignsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListCallSignsResponse) => void,
  ): ClientUnaryCall;
  listCallSigns(
    request: ListCallSignsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListCallSignsResponse) => void,
  ): ClientUnaryCall;
}

export const CallSignServiceClient = makeGenericClientConstructor(
  CallSignServiceService,
  "apfish.v1.call_sign.CallSignService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CallSignServiceClient;
  service: typeof CallSignServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
