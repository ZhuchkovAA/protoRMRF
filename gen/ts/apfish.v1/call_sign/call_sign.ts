// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/call_sign/call_sign.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { AuthoritySummary } from "../location/authority/summary/authority_summary";
import { ShipSummary } from "../ship/summary/ship_summary";

export const protobufPackage = "apfish.v1.call_sign";

export interface CallSign {
  id: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
  series: string;
  limitLower: string;
  limitUpper: string;
  authorities: AuthoritySummary[];
  ships: ShipSummary[];
}

function createBaseCallSign(): CallSign {
  return {
    id: "",
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    series: "",
    limitLower: "",
    limitUpper: "",
    authorities: [],
    ships: [],
  };
}

export const CallSign = {
  encode(message: CallSign, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).ldelim();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.series !== "") {
      writer.uint32(42).string(message.series);
    }
    if (message.limitLower !== "") {
      writer.uint32(50).string(message.limitLower);
    }
    if (message.limitUpper !== "") {
      writer.uint32(58).string(message.limitUpper);
    }
    for (const v of message.authorities) {
      AuthoritySummary.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    for (const v of message.ships) {
      ShipSummary.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallSign {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallSign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.series = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.limitLower = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.limitUpper = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.authorities.push(AuthoritySummary.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ships.push(ShipSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallSign {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      series: isSet(object.series) ? globalThis.String(object.series) : "",
      limitLower: isSet(object.limitLower) ? globalThis.String(object.limitLower) : "",
      limitUpper: isSet(object.limitUpper) ? globalThis.String(object.limitUpper) : "",
      authorities: globalThis.Array.isArray(object?.authorities)
        ? object.authorities.map((e: any) => AuthoritySummary.fromJSON(e))
        : [],
      ships: globalThis.Array.isArray(object?.ships) ? object.ships.map((e: any) => ShipSummary.fromJSON(e)) : [],
    };
  },

  toJSON(message: CallSign): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.series !== "") {
      obj.series = message.series;
    }
    if (message.limitLower !== "") {
      obj.limitLower = message.limitLower;
    }
    if (message.limitUpper !== "") {
      obj.limitUpper = message.limitUpper;
    }
    if (message.authorities?.length) {
      obj.authorities = message.authorities.map((e) => AuthoritySummary.toJSON(e));
    }
    if (message.ships?.length) {
      obj.ships = message.ships.map((e) => ShipSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallSign>, I>>(base?: I): CallSign {
    return CallSign.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallSign>, I>>(object: I): CallSign {
    const message = createBaseCallSign();
    message.id = object.id ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.series = object.series ?? "";
    message.limitLower = object.limitLower ?? "";
    message.limitUpper = object.limitUpper ?? "";
    message.authorities = object.authorities?.map((e) => AuthoritySummary.fromPartial(e)) || [];
    message.ships = object.ships?.map((e) => ShipSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
