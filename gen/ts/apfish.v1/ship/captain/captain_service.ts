// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/ship/captain/captain_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Captain } from "./captain";
import { CaptainSummary } from "./summary/captain_summary";

export const protobufPackage = "apfish.v1.ship.captain";

export interface CaptainRequest {
  id: number;
}

export interface CaptainResponse {
  captain: Captain | undefined;
}

export interface CaptainSummaryResponse {
  captain: CaptainSummary | undefined;
}

export interface ListCaptainsRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListCaptainsResponse {
  listCaptains: CaptainSummary[];
  total: number;
}

function createBaseCaptainRequest(): CaptainRequest {
  return { id: 0 };
}

export const CaptainRequest = {
  encode(message: CaptainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CaptainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaptainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaptainRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CaptainRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CaptainRequest>, I>>(base?: I): CaptainRequest {
    return CaptainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CaptainRequest>, I>>(object: I): CaptainRequest {
    const message = createBaseCaptainRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseCaptainResponse(): CaptainResponse {
  return { captain: undefined };
}

export const CaptainResponse = {
  encode(message: CaptainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.captain !== undefined) {
      Captain.encode(message.captain, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CaptainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaptainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.captain = Captain.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaptainResponse {
    return { captain: isSet(object.captain) ? Captain.fromJSON(object.captain) : undefined };
  },

  toJSON(message: CaptainResponse): unknown {
    const obj: any = {};
    if (message.captain !== undefined) {
      obj.captain = Captain.toJSON(message.captain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CaptainResponse>, I>>(base?: I): CaptainResponse {
    return CaptainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CaptainResponse>, I>>(object: I): CaptainResponse {
    const message = createBaseCaptainResponse();
    message.captain = (object.captain !== undefined && object.captain !== null)
      ? Captain.fromPartial(object.captain)
      : undefined;
    return message;
  },
};

function createBaseCaptainSummaryResponse(): CaptainSummaryResponse {
  return { captain: undefined };
}

export const CaptainSummaryResponse = {
  encode(message: CaptainSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.captain !== undefined) {
      CaptainSummary.encode(message.captain, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CaptainSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaptainSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.captain = CaptainSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaptainSummaryResponse {
    return { captain: isSet(object.captain) ? CaptainSummary.fromJSON(object.captain) : undefined };
  },

  toJSON(message: CaptainSummaryResponse): unknown {
    const obj: any = {};
    if (message.captain !== undefined) {
      obj.captain = CaptainSummary.toJSON(message.captain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CaptainSummaryResponse>, I>>(base?: I): CaptainSummaryResponse {
    return CaptainSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CaptainSummaryResponse>, I>>(object: I): CaptainSummaryResponse {
    const message = createBaseCaptainSummaryResponse();
    message.captain = (object.captain !== undefined && object.captain !== null)
      ? CaptainSummary.fromPartial(object.captain)
      : undefined;
    return message;
  },
};

function createBaseListCaptainsRequest(): ListCaptainsRequest {
  return { page: 0, perPage: 0 };
}

export const ListCaptainsRequest = {
  encode(message: ListCaptainsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCaptainsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCaptainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCaptainsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListCaptainsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCaptainsRequest>, I>>(base?: I): ListCaptainsRequest {
    return ListCaptainsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCaptainsRequest>, I>>(object: I): ListCaptainsRequest {
    const message = createBaseListCaptainsRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListCaptainsResponse(): ListCaptainsResponse {
  return { listCaptains: [], total: 0 };
}

export const ListCaptainsResponse = {
  encode(message: ListCaptainsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listCaptains) {
      CaptainSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCaptainsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCaptainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listCaptains.push(CaptainSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCaptainsResponse {
    return {
      listCaptains: globalThis.Array.isArray(object?.listCaptains)
        ? object.listCaptains.map((e: any) => CaptainSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListCaptainsResponse): unknown {
    const obj: any = {};
    if (message.listCaptains?.length) {
      obj.listCaptains = message.listCaptains.map((e) => CaptainSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCaptainsResponse>, I>>(base?: I): ListCaptainsResponse {
    return ListCaptainsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCaptainsResponse>, I>>(object: I): ListCaptainsResponse {
    const message = createBaseListCaptainsResponse();
    message.listCaptains = object.listCaptains?.map((e) => CaptainSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type CaptainServiceService = typeof CaptainServiceService;
export const CaptainServiceService = {
  getCaptain: {
    path: "/apfish.v1.ship.captain.CaptainService/GetCaptain",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CaptainRequest) => Buffer.from(CaptainRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CaptainRequest.decode(value),
    responseSerialize: (value: CaptainResponse) => Buffer.from(CaptainResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CaptainResponse.decode(value),
  },
  getCaptainSummary: {
    path: "/apfish.v1.ship.captain.CaptainService/GetCaptainSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CaptainRequest) => Buffer.from(CaptainRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CaptainRequest.decode(value),
    responseSerialize: (value: CaptainSummaryResponse) => Buffer.from(CaptainSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CaptainSummaryResponse.decode(value),
  },
  listCaptains: {
    path: "/apfish.v1.ship.captain.CaptainService/ListCaptains",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCaptainsRequest) => Buffer.from(ListCaptainsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListCaptainsRequest.decode(value),
    responseSerialize: (value: ListCaptainsResponse) => Buffer.from(ListCaptainsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListCaptainsResponse.decode(value),
  },
} as const;

export interface CaptainServiceServer extends UntypedServiceImplementation {
  getCaptain: handleUnaryCall<CaptainRequest, CaptainResponse>;
  getCaptainSummary: handleUnaryCall<CaptainRequest, CaptainSummaryResponse>;
  listCaptains: handleUnaryCall<ListCaptainsRequest, ListCaptainsResponse>;
}

export interface CaptainServiceClient extends Client {
  getCaptain(
    request: CaptainRequest,
    callback: (error: ServiceError | null, response: CaptainResponse) => void,
  ): ClientUnaryCall;
  getCaptain(
    request: CaptainRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CaptainResponse) => void,
  ): ClientUnaryCall;
  getCaptain(
    request: CaptainRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CaptainResponse) => void,
  ): ClientUnaryCall;
  getCaptainSummary(
    request: CaptainRequest,
    callback: (error: ServiceError | null, response: CaptainSummaryResponse) => void,
  ): ClientUnaryCall;
  getCaptainSummary(
    request: CaptainRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CaptainSummaryResponse) => void,
  ): ClientUnaryCall;
  getCaptainSummary(
    request: CaptainRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CaptainSummaryResponse) => void,
  ): ClientUnaryCall;
  listCaptains(
    request: ListCaptainsRequest,
    callback: (error: ServiceError | null, response: ListCaptainsResponse) => void,
  ): ClientUnaryCall;
  listCaptains(
    request: ListCaptainsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListCaptainsResponse) => void,
  ): ClientUnaryCall;
  listCaptains(
    request: ListCaptainsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListCaptainsResponse) => void,
  ): ClientUnaryCall;
}

export const CaptainServiceClient = makeGenericClientConstructor(
  CaptainServiceService,
  "apfish.v1.ship.captain.CaptainService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CaptainServiceClient;
  service: typeof CaptainServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
