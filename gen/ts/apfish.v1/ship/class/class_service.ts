// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/ship/class/class_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Class } from "./class";
import { ClassSummary } from "./summary/class_summary";

export const protobufPackage = "apfish.v1.ship.class";

export interface ClassRequest {
  id: Long;
}

export interface ClassResponse {
  class: Class | undefined;
}

export interface ClassSummaryResponse {
  class: ClassSummary | undefined;
}

export interface ListClassesRequest {
  /** Page number (1-based). Default: 1. */
  page: Long;
  /** Items per page (default: 20, max: 100). */
  perPage: Long;
}

export interface ListClassesResponse {
  listClasses: ClassSummary[];
  total: Long;
}

function createBaseClassRequest(): ClassRequest {
  return { id: Long.ZERO };
}

export const ClassRequest = {
  encode(message: ClassRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO };
  },

  toJSON(message: ClassRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassRequest>, I>>(base?: I): ClassRequest {
    return ClassRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassRequest>, I>>(object: I): ClassRequest {
    const message = createBaseClassRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    return message;
  },
};

function createBaseClassResponse(): ClassResponse {
  return { class: undefined };
}

export const ClassResponse = {
  encode(message: ClassResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.class !== undefined) {
      Class.encode(message.class, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.class = Class.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassResponse {
    return { class: isSet(object.class) ? Class.fromJSON(object.class) : undefined };
  },

  toJSON(message: ClassResponse): unknown {
    const obj: any = {};
    if (message.class !== undefined) {
      obj.class = Class.toJSON(message.class);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassResponse>, I>>(base?: I): ClassResponse {
    return ClassResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassResponse>, I>>(object: I): ClassResponse {
    const message = createBaseClassResponse();
    message.class = (object.class !== undefined && object.class !== null) ? Class.fromPartial(object.class) : undefined;
    return message;
  },
};

function createBaseClassSummaryResponse(): ClassSummaryResponse {
  return { class: undefined };
}

export const ClassSummaryResponse = {
  encode(message: ClassSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.class !== undefined) {
      ClassSummary.encode(message.class, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClassSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.class = ClassSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassSummaryResponse {
    return { class: isSet(object.class) ? ClassSummary.fromJSON(object.class) : undefined };
  },

  toJSON(message: ClassSummaryResponse): unknown {
    const obj: any = {};
    if (message.class !== undefined) {
      obj.class = ClassSummary.toJSON(message.class);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassSummaryResponse>, I>>(base?: I): ClassSummaryResponse {
    return ClassSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassSummaryResponse>, I>>(object: I): ClassSummaryResponse {
    const message = createBaseClassSummaryResponse();
    message.class = (object.class !== undefined && object.class !== null)
      ? ClassSummary.fromPartial(object.class)
      : undefined;
    return message;
  },
};

function createBaseListClassesRequest(): ListClassesRequest {
  return { page: Long.ZERO, perPage: Long.ZERO };
}

export const ListClassesRequest = {
  encode(message: ListClassesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.page.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.page);
    }
    if (!message.perPage.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListClassesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClassesRequest {
    return {
      page: isSet(object.page) ? Long.fromValue(object.page) : Long.ZERO,
      perPage: isSet(object.perPage) ? Long.fromValue(object.perPage) : Long.ZERO,
    };
  },

  toJSON(message: ListClassesRequest): unknown {
    const obj: any = {};
    if (!message.page.equals(Long.ZERO)) {
      obj.page = (message.page || Long.ZERO).toString();
    }
    if (!message.perPage.equals(Long.ZERO)) {
      obj.perPage = (message.perPage || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListClassesRequest>, I>>(base?: I): ListClassesRequest {
    return ListClassesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListClassesRequest>, I>>(object: I): ListClassesRequest {
    const message = createBaseListClassesRequest();
    message.page = (object.page !== undefined && object.page !== null) ? Long.fromValue(object.page) : Long.ZERO;
    message.perPage = (object.perPage !== undefined && object.perPage !== null)
      ? Long.fromValue(object.perPage)
      : Long.ZERO;
    return message;
  },
};

function createBaseListClassesResponse(): ListClassesResponse {
  return { listClasses: [], total: Long.ZERO };
}

export const ListClassesResponse = {
  encode(message: ListClassesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listClasses) {
      ClassSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListClassesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClassesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listClasses.push(ClassSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClassesResponse {
    return {
      listClasses: globalThis.Array.isArray(object?.listClasses)
        ? object.listClasses.map((e: any) => ClassSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,
    };
  },

  toJSON(message: ListClassesResponse): unknown {
    const obj: any = {};
    if (message.listClasses?.length) {
      obj.listClasses = message.listClasses.map((e) => ClassSummary.toJSON(e));
    }
    if (!message.total.equals(Long.ZERO)) {
      obj.total = (message.total || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListClassesResponse>, I>>(base?: I): ListClassesResponse {
    return ListClassesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListClassesResponse>, I>>(object: I): ListClassesResponse {
    const message = createBaseListClassesResponse();
    message.listClasses = object.listClasses?.map((e) => ClassSummary.fromPartial(e)) || [];
    message.total = (object.total !== undefined && object.total !== null) ? Long.fromValue(object.total) : Long.ZERO;
    return message;
  },
};

export type ClassServiceService = typeof ClassServiceService;
export const ClassServiceService = {
  getClass: {
    path: "/apfish.v1.ship.class.ClassService/GetClass",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassRequest) => Buffer.from(ClassRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassRequest.decode(value),
    responseSerialize: (value: ClassResponse) => Buffer.from(ClassResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassResponse.decode(value),
  },
  getClassSummary: {
    path: "/apfish.v1.ship.class.ClassService/GetClassSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassRequest) => Buffer.from(ClassRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassRequest.decode(value),
    responseSerialize: (value: ClassSummaryResponse) => Buffer.from(ClassSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassSummaryResponse.decode(value),
  },
  listClasses: {
    path: "/apfish.v1.ship.class.ClassService/ListClasses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListClassesRequest) => Buffer.from(ListClassesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListClassesRequest.decode(value),
    responseSerialize: (value: ListClassesResponse) => Buffer.from(ListClassesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListClassesResponse.decode(value),
  },
} as const;

export interface ClassServiceServer extends UntypedServiceImplementation {
  getClass: handleUnaryCall<ClassRequest, ClassResponse>;
  getClassSummary: handleUnaryCall<ClassRequest, ClassSummaryResponse>;
  listClasses: handleUnaryCall<ListClassesRequest, ListClassesResponse>;
}

export interface ClassServiceClient extends Client {
  getClass(
    request: ClassRequest,
    callback: (error: ServiceError | null, response: ClassResponse) => void,
  ): ClientUnaryCall;
  getClass(
    request: ClassRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ClassResponse) => void,
  ): ClientUnaryCall;
  getClass(
    request: ClassRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ClassResponse) => void,
  ): ClientUnaryCall;
  getClassSummary(
    request: ClassRequest,
    callback: (error: ServiceError | null, response: ClassSummaryResponse) => void,
  ): ClientUnaryCall;
  getClassSummary(
    request: ClassRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ClassSummaryResponse) => void,
  ): ClientUnaryCall;
  getClassSummary(
    request: ClassRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ClassSummaryResponse) => void,
  ): ClientUnaryCall;
  listClasses(
    request: ListClassesRequest,
    callback: (error: ServiceError | null, response: ListClassesResponse) => void,
  ): ClientUnaryCall;
  listClasses(
    request: ListClassesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListClassesResponse) => void,
  ): ClientUnaryCall;
  listClasses(
    request: ListClassesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListClassesResponse) => void,
  ): ClientUnaryCall;
}

export const ClassServiceClient = makeGenericClientConstructor(
  ClassServiceService,
  "apfish.v1.ship.class.ClassService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ClassServiceClient;
  service: typeof ClassServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
