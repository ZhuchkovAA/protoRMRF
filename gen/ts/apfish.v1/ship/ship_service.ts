// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/ship/ship_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Ship } from "./ship";
import { ShipSummary } from "./summary/ship_summary";

export const protobufPackage = "apfish.v1.ship";

export interface ShipRequest {
  id: Long;
}

export interface ShipResponse {
  ship: Ship | undefined;
}

export interface ShipSummaryResponse {
  ship: ShipSummary | undefined;
}

export interface ListShipsRequest {
  /** Page number (1-based). Default: 1. */
  page: Long;
  /** Items per page (default: 20, max: 100). */
  perPage: Long;
}

export interface ListShipsResponse {
  listShips: ShipSummary[];
  total: Long;
}

function createBaseShipRequest(): ShipRequest {
  return { id: Long.ZERO };
}

export const ShipRequest = {
  encode(message: ShipRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ShipRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShipRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO };
  },

  toJSON(message: ShipRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShipRequest>, I>>(base?: I): ShipRequest {
    return ShipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShipRequest>, I>>(object: I): ShipRequest {
    const message = createBaseShipRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    return message;
  },
};

function createBaseShipResponse(): ShipResponse {
  return { ship: undefined };
}

export const ShipResponse = {
  encode(message: ShipResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ship !== undefined) {
      Ship.encode(message.ship, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ShipResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ship = Ship.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShipResponse {
    return { ship: isSet(object.ship) ? Ship.fromJSON(object.ship) : undefined };
  },

  toJSON(message: ShipResponse): unknown {
    const obj: any = {};
    if (message.ship !== undefined) {
      obj.ship = Ship.toJSON(message.ship);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShipResponse>, I>>(base?: I): ShipResponse {
    return ShipResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShipResponse>, I>>(object: I): ShipResponse {
    const message = createBaseShipResponse();
    message.ship = (object.ship !== undefined && object.ship !== null) ? Ship.fromPartial(object.ship) : undefined;
    return message;
  },
};

function createBaseShipSummaryResponse(): ShipSummaryResponse {
  return { ship: undefined };
}

export const ShipSummaryResponse = {
  encode(message: ShipSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ship !== undefined) {
      ShipSummary.encode(message.ship, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ShipSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShipSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ship = ShipSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShipSummaryResponse {
    return { ship: isSet(object.ship) ? ShipSummary.fromJSON(object.ship) : undefined };
  },

  toJSON(message: ShipSummaryResponse): unknown {
    const obj: any = {};
    if (message.ship !== undefined) {
      obj.ship = ShipSummary.toJSON(message.ship);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShipSummaryResponse>, I>>(base?: I): ShipSummaryResponse {
    return ShipSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShipSummaryResponse>, I>>(object: I): ShipSummaryResponse {
    const message = createBaseShipSummaryResponse();
    message.ship = (object.ship !== undefined && object.ship !== null)
      ? ShipSummary.fromPartial(object.ship)
      : undefined;
    return message;
  },
};

function createBaseListShipsRequest(): ListShipsRequest {
  return { page: Long.ZERO, perPage: Long.ZERO };
}

export const ListShipsRequest = {
  encode(message: ListShipsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.page.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.page);
    }
    if (!message.perPage.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListShipsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShipsRequest {
    return {
      page: isSet(object.page) ? Long.fromValue(object.page) : Long.ZERO,
      perPage: isSet(object.perPage) ? Long.fromValue(object.perPage) : Long.ZERO,
    };
  },

  toJSON(message: ListShipsRequest): unknown {
    const obj: any = {};
    if (!message.page.equals(Long.ZERO)) {
      obj.page = (message.page || Long.ZERO).toString();
    }
    if (!message.perPage.equals(Long.ZERO)) {
      obj.perPage = (message.perPage || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListShipsRequest>, I>>(base?: I): ListShipsRequest {
    return ListShipsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListShipsRequest>, I>>(object: I): ListShipsRequest {
    const message = createBaseListShipsRequest();
    message.page = (object.page !== undefined && object.page !== null) ? Long.fromValue(object.page) : Long.ZERO;
    message.perPage = (object.perPage !== undefined && object.perPage !== null)
      ? Long.fromValue(object.perPage)
      : Long.ZERO;
    return message;
  },
};

function createBaseListShipsResponse(): ListShipsResponse {
  return { listShips: [], total: Long.ZERO };
}

export const ListShipsResponse = {
  encode(message: ListShipsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listShips) {
      ShipSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListShipsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listShips.push(ShipSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShipsResponse {
    return {
      listShips: globalThis.Array.isArray(object?.listShips)
        ? object.listShips.map((e: any) => ShipSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,
    };
  },

  toJSON(message: ListShipsResponse): unknown {
    const obj: any = {};
    if (message.listShips?.length) {
      obj.listShips = message.listShips.map((e) => ShipSummary.toJSON(e));
    }
    if (!message.total.equals(Long.ZERO)) {
      obj.total = (message.total || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListShipsResponse>, I>>(base?: I): ListShipsResponse {
    return ListShipsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListShipsResponse>, I>>(object: I): ListShipsResponse {
    const message = createBaseListShipsResponse();
    message.listShips = object.listShips?.map((e) => ShipSummary.fromPartial(e)) || [];
    message.total = (object.total !== undefined && object.total !== null) ? Long.fromValue(object.total) : Long.ZERO;
    return message;
  },
};

export type ShipServiceService = typeof ShipServiceService;
export const ShipServiceService = {
  getShip: {
    path: "/apfish.v1.ship.ShipService/GetShip",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ShipRequest) => Buffer.from(ShipRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ShipRequest.decode(value),
    responseSerialize: (value: ShipResponse) => Buffer.from(ShipResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ShipResponse.decode(value),
  },
  getShipSummary: {
    path: "/apfish.v1.ship.ShipService/GetShipSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ShipRequest) => Buffer.from(ShipRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ShipRequest.decode(value),
    responseSerialize: (value: ShipSummaryResponse) => Buffer.from(ShipSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ShipSummaryResponse.decode(value),
  },
  listShips: {
    path: "/apfish.v1.ship.ShipService/ListShips",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListShipsRequest) => Buffer.from(ListShipsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListShipsRequest.decode(value),
    responseSerialize: (value: ListShipsResponse) => Buffer.from(ListShipsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListShipsResponse.decode(value),
  },
} as const;

export interface ShipServiceServer extends UntypedServiceImplementation {
  getShip: handleUnaryCall<ShipRequest, ShipResponse>;
  getShipSummary: handleUnaryCall<ShipRequest, ShipSummaryResponse>;
  listShips: handleUnaryCall<ListShipsRequest, ListShipsResponse>;
}

export interface ShipServiceClient extends Client {
  getShip(
    request: ShipRequest,
    callback: (error: ServiceError | null, response: ShipResponse) => void,
  ): ClientUnaryCall;
  getShip(
    request: ShipRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ShipResponse) => void,
  ): ClientUnaryCall;
  getShip(
    request: ShipRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ShipResponse) => void,
  ): ClientUnaryCall;
  getShipSummary(
    request: ShipRequest,
    callback: (error: ServiceError | null, response: ShipSummaryResponse) => void,
  ): ClientUnaryCall;
  getShipSummary(
    request: ShipRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ShipSummaryResponse) => void,
  ): ClientUnaryCall;
  getShipSummary(
    request: ShipRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ShipSummaryResponse) => void,
  ): ClientUnaryCall;
  listShips(
    request: ListShipsRequest,
    callback: (error: ServiceError | null, response: ListShipsResponse) => void,
  ): ClientUnaryCall;
  listShips(
    request: ListShipsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListShipsResponse) => void,
  ): ClientUnaryCall;
  listShips(
    request: ListShipsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListShipsResponse) => void,
  ): ClientUnaryCall;
}

export const ShipServiceClient = makeGenericClientConstructor(
  ShipServiceService,
  "apfish.v1.ship.ShipService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ShipServiceClient;
  service: typeof ShipServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
