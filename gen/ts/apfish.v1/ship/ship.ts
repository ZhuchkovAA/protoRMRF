// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/ship/ship.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { CallSignSummary } from "../call_sign/summary/call_sign_summary";
import { AuthoritySummary } from "../location/authority/summary/authority_summary";
import { PermissionSummary } from "../permission/summary/permission_summary";
import { CaptainSummary } from "./captain/summary/captain_summary";
import { ClassSummary } from "./class/summary/class_summary";
import { TypeSummary } from "./type/summary/type_summary";

export const protobufPackage = "apfish.v1.ship";

export interface Ship {
  id: string;
  imo: number;
  type: TypeSummary | undefined;
  class: ClassSummary | undefined;
  authority: AuthoritySummary | undefined;
  name: string;
  mmsi: number;
  callSign: CallSignSummary | undefined;
  callSignValue: string;
  dateBuild: Date | undefined;
  deadWeight: number;
  tonnage: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
  captains: CaptainSummary[];
  permissions: PermissionSummary[];
}

function createBaseShip(): Ship {
  return {
    id: "",
    imo: 0,
    type: undefined,
    class: undefined,
    authority: undefined,
    name: "",
    mmsi: 0,
    callSign: undefined,
    callSignValue: "",
    dateBuild: undefined,
    deadWeight: 0,
    tonnage: 0,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    captains: [],
    permissions: [],
  };
}

export const Ship = {
  encode(message: Ship, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.imo !== 0) {
      writer.uint32(16).int32(message.imo);
    }
    if (message.type !== undefined) {
      TypeSummary.encode(message.type, writer.uint32(26).fork()).ldelim();
    }
    if (message.class !== undefined) {
      ClassSummary.encode(message.class, writer.uint32(34).fork()).ldelim();
    }
    if (message.authority !== undefined) {
      AuthoritySummary.encode(message.authority, writer.uint32(42).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.mmsi !== 0) {
      writer.uint32(56).int32(message.mmsi);
    }
    if (message.callSign !== undefined) {
      CallSignSummary.encode(message.callSign, writer.uint32(66).fork()).ldelim();
    }
    if (message.callSignValue !== "") {
      writer.uint32(74).string(message.callSignValue);
    }
    if (message.dateBuild !== undefined) {
      Timestamp.encode(toTimestamp(message.dateBuild), writer.uint32(82).fork()).ldelim();
    }
    if (message.deadWeight !== 0) {
      writer.uint32(88).int32(message.deadWeight);
    }
    if (message.tonnage !== 0) {
      writer.uint32(96).int32(message.tonnage);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(106).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(114).fork()).ldelim();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(122).fork()).ldelim();
    }
    for (const v of message.captains) {
      CaptainSummary.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    for (const v of message.permissions) {
      PermissionSummary.encode(v!, writer.uint32(138).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ship {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.imo = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = TypeSummary.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.class = ClassSummary.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authority = AuthoritySummary.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.mmsi = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.callSign = CallSignSummary.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.callSignValue = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.dateBuild = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.deadWeight = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.tonnage = reader.int32();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.captains.push(CaptainSummary.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.permissions.push(PermissionSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ship {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      imo: isSet(object.imo) ? globalThis.Number(object.imo) : 0,
      type: isSet(object.type) ? TypeSummary.fromJSON(object.type) : undefined,
      class: isSet(object.class) ? ClassSummary.fromJSON(object.class) : undefined,
      authority: isSet(object.authority) ? AuthoritySummary.fromJSON(object.authority) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mmsi: isSet(object.mmsi) ? globalThis.Number(object.mmsi) : 0,
      callSign: isSet(object.callSign) ? CallSignSummary.fromJSON(object.callSign) : undefined,
      callSignValue: isSet(object.callSignValue) ? globalThis.String(object.callSignValue) : "",
      dateBuild: isSet(object.dateBuild) ? fromJsonTimestamp(object.dateBuild) : undefined,
      deadWeight: isSet(object.deadWeight) ? globalThis.Number(object.deadWeight) : 0,
      tonnage: isSet(object.tonnage) ? globalThis.Number(object.tonnage) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      captains: globalThis.Array.isArray(object?.captains)
        ? object.captains.map((e: any) => CaptainSummary.fromJSON(e))
        : [],
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => PermissionSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Ship): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.imo !== 0) {
      obj.imo = Math.round(message.imo);
    }
    if (message.type !== undefined) {
      obj.type = TypeSummary.toJSON(message.type);
    }
    if (message.class !== undefined) {
      obj.class = ClassSummary.toJSON(message.class);
    }
    if (message.authority !== undefined) {
      obj.authority = AuthoritySummary.toJSON(message.authority);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mmsi !== 0) {
      obj.mmsi = Math.round(message.mmsi);
    }
    if (message.callSign !== undefined) {
      obj.callSign = CallSignSummary.toJSON(message.callSign);
    }
    if (message.callSignValue !== "") {
      obj.callSignValue = message.callSignValue;
    }
    if (message.dateBuild !== undefined) {
      obj.dateBuild = message.dateBuild.toISOString();
    }
    if (message.deadWeight !== 0) {
      obj.deadWeight = Math.round(message.deadWeight);
    }
    if (message.tonnage !== 0) {
      obj.tonnage = Math.round(message.tonnage);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.captains?.length) {
      obj.captains = message.captains.map((e) => CaptainSummary.toJSON(e));
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => PermissionSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ship>, I>>(base?: I): Ship {
    return Ship.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ship>, I>>(object: I): Ship {
    const message = createBaseShip();
    message.id = object.id ?? "";
    message.imo = object.imo ?? 0;
    message.type = (object.type !== undefined && object.type !== null)
      ? TypeSummary.fromPartial(object.type)
      : undefined;
    message.class = (object.class !== undefined && object.class !== null)
      ? ClassSummary.fromPartial(object.class)
      : undefined;
    message.authority = (object.authority !== undefined && object.authority !== null)
      ? AuthoritySummary.fromPartial(object.authority)
      : undefined;
    message.name = object.name ?? "";
    message.mmsi = object.mmsi ?? 0;
    message.callSign = (object.callSign !== undefined && object.callSign !== null)
      ? CallSignSummary.fromPartial(object.callSign)
      : undefined;
    message.callSignValue = object.callSignValue ?? "";
    message.dateBuild = object.dateBuild ?? undefined;
    message.deadWeight = object.deadWeight ?? 0;
    message.tonnage = object.tonnage ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.captains = object.captains?.map((e) => CaptainSummary.fromPartial(e)) || [];
    message.permissions = object.permissions?.map((e) => PermissionSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
