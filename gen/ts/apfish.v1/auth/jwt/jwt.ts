// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/auth/jwt/jwt.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PermissionJwt } from "../../permission/summary/permission_summary";

export const protobufPackage = "apfish.v1.auth.jwt";

export interface JwtData {
  id: string;
  roleId: string;
  permissions: PermissionJwt[];
  exp: Long;
  iat: Long;
}

function createBaseJwtData(): JwtData {
  return { id: "", roleId: "", permissions: [], exp: Long.ZERO, iat: Long.ZERO };
}

export const JwtData = {
  encode(message: JwtData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.roleId !== "") {
      writer.uint32(18).string(message.roleId);
    }
    for (const v of message.permissions) {
      PermissionJwt.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (!message.exp.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.exp);
    }
    if (!message.iat.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.iat);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JwtData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJwtData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permissions.push(PermissionJwt.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.exp = reader.int64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.iat = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JwtData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => PermissionJwt.fromJSON(e))
        : [],
      exp: isSet(object.exp) ? Long.fromValue(object.exp) : Long.ZERO,
      iat: isSet(object.iat) ? Long.fromValue(object.iat) : Long.ZERO,
    };
  },

  toJSON(message: JwtData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => PermissionJwt.toJSON(e));
    }
    if (!message.exp.equals(Long.ZERO)) {
      obj.exp = (message.exp || Long.ZERO).toString();
    }
    if (!message.iat.equals(Long.ZERO)) {
      obj.iat = (message.iat || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JwtData>, I>>(base?: I): JwtData {
    return JwtData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JwtData>, I>>(object: I): JwtData {
    const message = createBaseJwtData();
    message.id = object.id ?? "";
    message.roleId = object.roleId ?? "";
    message.permissions = object.permissions?.map((e) => PermissionJwt.fromPartial(e)) || [];
    message.exp = (object.exp !== undefined && object.exp !== null) ? Long.fromValue(object.exp) : Long.ZERO;
    message.iat = (object.iat !== undefined && object.iat !== null) ? Long.fromValue(object.iat) : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
