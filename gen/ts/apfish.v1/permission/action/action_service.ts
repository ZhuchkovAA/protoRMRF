// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/permission/action/action_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Action } from "./action";
import { ActionSummary } from "./summary/action_summary";

export const protobufPackage = "apfish.v1.permission.action";

export interface ActionRequest {
  id: number;
}

export interface ActionResponse {
  action: Action | undefined;
}

export interface ActionSummaryResponse {
  action: ActionSummary | undefined;
}

export interface ListActionsRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListActionsResponse {
  listActions: ActionSummary[];
  total: number;
}

function createBaseActionRequest(): ActionRequest {
  return { id: 0 };
}

export const ActionRequest = {
  encode(message: ActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ActionRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionRequest>, I>>(base?: I): ActionRequest {
    return ActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionRequest>, I>>(object: I): ActionRequest {
    const message = createBaseActionRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseActionResponse(): ActionResponse {
  return { action: undefined };
}

export const ActionResponse = {
  encode(message: ActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionResponse {
    return { action: isSet(object.action) ? Action.fromJSON(object.action) : undefined };
  },

  toJSON(message: ActionResponse): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = Action.toJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionResponse>, I>>(base?: I): ActionResponse {
    return ActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionResponse>, I>>(object: I): ActionResponse {
    const message = createBaseActionResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseActionSummaryResponse(): ActionSummaryResponse {
  return { action: undefined };
}

export const ActionSummaryResponse = {
  encode(message: ActionSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      ActionSummary.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = ActionSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionSummaryResponse {
    return { action: isSet(object.action) ? ActionSummary.fromJSON(object.action) : undefined };
  },

  toJSON(message: ActionSummaryResponse): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = ActionSummary.toJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionSummaryResponse>, I>>(base?: I): ActionSummaryResponse {
    return ActionSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionSummaryResponse>, I>>(object: I): ActionSummaryResponse {
    const message = createBaseActionSummaryResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? ActionSummary.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseListActionsRequest(): ListActionsRequest {
  return { page: 0, perPage: 0 };
}

export const ListActionsRequest = {
  encode(message: ListActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActionsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListActionsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActionsRequest>, I>>(base?: I): ListActionsRequest {
    return ListActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActionsRequest>, I>>(object: I): ListActionsRequest {
    const message = createBaseListActionsRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListActionsResponse(): ListActionsResponse {
  return { listActions: [], total: 0 };
}

export const ListActionsResponse = {
  encode(message: ListActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listActions) {
      ActionSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listActions.push(ActionSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActionsResponse {
    return {
      listActions: globalThis.Array.isArray(object?.listActions)
        ? object.listActions.map((e: any) => ActionSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListActionsResponse): unknown {
    const obj: any = {};
    if (message.listActions?.length) {
      obj.listActions = message.listActions.map((e) => ActionSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActionsResponse>, I>>(base?: I): ListActionsResponse {
    return ListActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActionsResponse>, I>>(object: I): ListActionsResponse {
    const message = createBaseListActionsResponse();
    message.listActions = object.listActions?.map((e) => ActionSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type ActionServiceService = typeof ActionServiceService;
export const ActionServiceService = {
  getAction: {
    path: "/apfish.v1.permission.action.ActionService/GetAction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ActionRequest) => Buffer.from(ActionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ActionRequest.decode(value),
    responseSerialize: (value: ActionResponse) => Buffer.from(ActionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ActionResponse.decode(value),
  },
  getActionSummary: {
    path: "/apfish.v1.permission.action.ActionService/GetActionSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ActionRequest) => Buffer.from(ActionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ActionRequest.decode(value),
    responseSerialize: (value: ActionSummaryResponse) => Buffer.from(ActionSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ActionSummaryResponse.decode(value),
  },
  listActions: {
    path: "/apfish.v1.permission.action.ActionService/ListActions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListActionsRequest) => Buffer.from(ListActionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListActionsRequest.decode(value),
    responseSerialize: (value: ListActionsResponse) => Buffer.from(ListActionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListActionsResponse.decode(value),
  },
} as const;

export interface ActionServiceServer extends UntypedServiceImplementation {
  getAction: handleUnaryCall<ActionRequest, ActionResponse>;
  getActionSummary: handleUnaryCall<ActionRequest, ActionSummaryResponse>;
  listActions: handleUnaryCall<ListActionsRequest, ListActionsResponse>;
}

export interface ActionServiceClient extends Client {
  getAction(
    request: ActionRequest,
    callback: (error: ServiceError | null, response: ActionResponse) => void,
  ): ClientUnaryCall;
  getAction(
    request: ActionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ActionResponse) => void,
  ): ClientUnaryCall;
  getAction(
    request: ActionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ActionResponse) => void,
  ): ClientUnaryCall;
  getActionSummary(
    request: ActionRequest,
    callback: (error: ServiceError | null, response: ActionSummaryResponse) => void,
  ): ClientUnaryCall;
  getActionSummary(
    request: ActionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ActionSummaryResponse) => void,
  ): ClientUnaryCall;
  getActionSummary(
    request: ActionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ActionSummaryResponse) => void,
  ): ClientUnaryCall;
  listActions(
    request: ListActionsRequest,
    callback: (error: ServiceError | null, response: ListActionsResponse) => void,
  ): ClientUnaryCall;
  listActions(
    request: ListActionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListActionsResponse) => void,
  ): ClientUnaryCall;
  listActions(
    request: ListActionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListActionsResponse) => void,
  ): ClientUnaryCall;
}

export const ActionServiceClient = makeGenericClientConstructor(
  ActionServiceService,
  "apfish.v1.permission.action.ActionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ActionServiceClient;
  service: typeof ActionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
