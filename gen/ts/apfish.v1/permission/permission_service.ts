// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/permission/permission_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Permission } from "./permission";
import { PermissionSummary } from "./summary/permission_summary";

export const protobufPackage = "apfish.v1.permission";

export interface PermissionRequest {
  id: Long;
}

export interface PermissionResponse {
  permission: Permission | undefined;
}

export interface PermissionSummaryResponse {
  permission: PermissionSummary | undefined;
}

export interface ListPermissionsRequest {
  /** Page number (1-based). Default: 1. */
  page: Long;
  /** Items per page (default: 20, max: 100). */
  perPage: Long;
}

export interface ListPermissionsResponse {
  listPermissions: PermissionSummary[];
  total: Long;
}

function createBasePermissionRequest(): PermissionRequest {
  return { id: Long.ZERO };
}

export const PermissionRequest = {
  encode(message: PermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO };
  },

  toJSON(message: PermissionRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionRequest>, I>>(base?: I): PermissionRequest {
    return PermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionRequest>, I>>(object: I): PermissionRequest {
    const message = createBasePermissionRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    return message;
  },
};

function createBasePermissionResponse(): PermissionResponse {
  return { permission: undefined };
}

export const PermissionResponse = {
  encode(message: PermissionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionResponse {
    return { permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined };
  },

  toJSON(message: PermissionResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionResponse>, I>>(base?: I): PermissionResponse {
    return PermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionResponse>, I>>(object: I): PermissionResponse {
    const message = createBasePermissionResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    return message;
  },
};

function createBasePermissionSummaryResponse(): PermissionSummaryResponse {
  return { permission: undefined };
}

export const PermissionSummaryResponse = {
  encode(message: PermissionSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permission !== undefined) {
      PermissionSummary.encode(message.permission, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission = PermissionSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSummaryResponse {
    return { permission: isSet(object.permission) ? PermissionSummary.fromJSON(object.permission) : undefined };
  },

  toJSON(message: PermissionSummaryResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = PermissionSummary.toJSON(message.permission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionSummaryResponse>, I>>(base?: I): PermissionSummaryResponse {
    return PermissionSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionSummaryResponse>, I>>(object: I): PermissionSummaryResponse {
    const message = createBasePermissionSummaryResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? PermissionSummary.fromPartial(object.permission)
      : undefined;
    return message;
  },
};

function createBaseListPermissionsRequest(): ListPermissionsRequest {
  return { page: Long.ZERO, perPage: Long.ZERO };
}

export const ListPermissionsRequest = {
  encode(message: ListPermissionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.page.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.page);
    }
    if (!message.perPage.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPermissionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsRequest {
    return {
      page: isSet(object.page) ? Long.fromValue(object.page) : Long.ZERO,
      perPage: isSet(object.perPage) ? Long.fromValue(object.perPage) : Long.ZERO,
    };
  },

  toJSON(message: ListPermissionsRequest): unknown {
    const obj: any = {};
    if (!message.page.equals(Long.ZERO)) {
      obj.page = (message.page || Long.ZERO).toString();
    }
    if (!message.perPage.equals(Long.ZERO)) {
      obj.perPage = (message.perPage || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPermissionsRequest>, I>>(base?: I): ListPermissionsRequest {
    return ListPermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPermissionsRequest>, I>>(object: I): ListPermissionsRequest {
    const message = createBaseListPermissionsRequest();
    message.page = (object.page !== undefined && object.page !== null) ? Long.fromValue(object.page) : Long.ZERO;
    message.perPage = (object.perPage !== undefined && object.perPage !== null)
      ? Long.fromValue(object.perPage)
      : Long.ZERO;
    return message;
  },
};

function createBaseListPermissionsResponse(): ListPermissionsResponse {
  return { listPermissions: [], total: Long.ZERO };
}

export const ListPermissionsResponse = {
  encode(message: ListPermissionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listPermissions) {
      PermissionSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPermissionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listPermissions.push(PermissionSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsResponse {
    return {
      listPermissions: globalThis.Array.isArray(object?.listPermissions)
        ? object.listPermissions.map((e: any) => PermissionSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,
    };
  },

  toJSON(message: ListPermissionsResponse): unknown {
    const obj: any = {};
    if (message.listPermissions?.length) {
      obj.listPermissions = message.listPermissions.map((e) => PermissionSummary.toJSON(e));
    }
    if (!message.total.equals(Long.ZERO)) {
      obj.total = (message.total || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPermissionsResponse>, I>>(base?: I): ListPermissionsResponse {
    return ListPermissionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPermissionsResponse>, I>>(object: I): ListPermissionsResponse {
    const message = createBaseListPermissionsResponse();
    message.listPermissions = object.listPermissions?.map((e) => PermissionSummary.fromPartial(e)) || [];
    message.total = (object.total !== undefined && object.total !== null) ? Long.fromValue(object.total) : Long.ZERO;
    return message;
  },
};

export type PermissionServiceService = typeof PermissionServiceService;
export const PermissionServiceService = {
  getPermission: {
    path: "/apfish.v1.permission.PermissionService/GetPermission",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionRequest) => Buffer.from(PermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PermissionRequest.decode(value),
    responseSerialize: (value: PermissionResponse) => Buffer.from(PermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PermissionResponse.decode(value),
  },
  getPermissionSummary: {
    path: "/apfish.v1.permission.PermissionService/GetPermissionSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionRequest) => Buffer.from(PermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PermissionRequest.decode(value),
    responseSerialize: (value: PermissionSummaryResponse) =>
      Buffer.from(PermissionSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PermissionSummaryResponse.decode(value),
  },
  listPermissions: {
    path: "/apfish.v1.permission.PermissionService/ListPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListPermissionsRequest) => Buffer.from(ListPermissionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListPermissionsRequest.decode(value),
    responseSerialize: (value: ListPermissionsResponse) => Buffer.from(ListPermissionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListPermissionsResponse.decode(value),
  },
} as const;

export interface PermissionServiceServer extends UntypedServiceImplementation {
  getPermission: handleUnaryCall<PermissionRequest, PermissionResponse>;
  getPermissionSummary: handleUnaryCall<PermissionRequest, PermissionSummaryResponse>;
  listPermissions: handleUnaryCall<ListPermissionsRequest, ListPermissionsResponse>;
}

export interface PermissionServiceClient extends Client {
  getPermission(
    request: PermissionRequest,
    callback: (error: ServiceError | null, response: PermissionResponse) => void,
  ): ClientUnaryCall;
  getPermission(
    request: PermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PermissionResponse) => void,
  ): ClientUnaryCall;
  getPermission(
    request: PermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PermissionResponse) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
}

export const PermissionServiceClient = makeGenericClientConstructor(
  PermissionServiceService,
  "apfish.v1.permission.PermissionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PermissionServiceClient;
  service: typeof PermissionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
