// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/permission/permission_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { StringValue } from "../../google/protobuf/wrappers";
import { SuccessResponse } from "../helper/helper";
import { Permission } from "./permission";
import { PermissionSummary } from "./summary/permission_summary";

export const protobufPackage = "apfish.v1.permission";

export interface PermissionRequest {
  id: string;
}

export interface PermissionSummaryResponse {
  permission: PermissionSummary | undefined;
}

export interface ListPermissionsRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListPermissionsResponse {
  listPermissions: PermissionSummary[];
  total: number;
}

export interface CreatePermissionRequest {
  actionId: string;
  objectId: string;
  description: string | undefined;
  name: string | undefined;
  code: string | undefined;
  authoritiesIds: string[];
  districtsIds: string[];
  portsIds: string[];
  shipsIds: string[];
}

export interface CreatePermissionResponse {
  permissionId: string;
}

export interface CreatePermissionsRequest {
  permissions: CreatePermissionRequest[];
}

export interface CreatePermissionsResponse {
  permissionsIds: string[];
}

export interface DeletePermissionRequest {
  permissionId: string;
}

function createBasePermissionRequest(): PermissionRequest {
  return { id: "" };
}

export const PermissionRequest = {
  encode(message: PermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: PermissionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionRequest>, I>>(base?: I): PermissionRequest {
    return PermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionRequest>, I>>(object: I): PermissionRequest {
    const message = createBasePermissionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePermissionSummaryResponse(): PermissionSummaryResponse {
  return { permission: undefined };
}

export const PermissionSummaryResponse = {
  encode(message: PermissionSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permission !== undefined) {
      PermissionSummary.encode(message.permission, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission = PermissionSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSummaryResponse {
    return { permission: isSet(object.permission) ? PermissionSummary.fromJSON(object.permission) : undefined };
  },

  toJSON(message: PermissionSummaryResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = PermissionSummary.toJSON(message.permission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionSummaryResponse>, I>>(base?: I): PermissionSummaryResponse {
    return PermissionSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionSummaryResponse>, I>>(object: I): PermissionSummaryResponse {
    const message = createBasePermissionSummaryResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? PermissionSummary.fromPartial(object.permission)
      : undefined;
    return message;
  },
};

function createBaseListPermissionsRequest(): ListPermissionsRequest {
  return { page: 0, perPage: 0 };
}

export const ListPermissionsRequest = {
  encode(message: ListPermissionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPermissionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListPermissionsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPermissionsRequest>, I>>(base?: I): ListPermissionsRequest {
    return ListPermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPermissionsRequest>, I>>(object: I): ListPermissionsRequest {
    const message = createBaseListPermissionsRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListPermissionsResponse(): ListPermissionsResponse {
  return { listPermissions: [], total: 0 };
}

export const ListPermissionsResponse = {
  encode(message: ListPermissionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listPermissions) {
      PermissionSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPermissionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listPermissions.push(PermissionSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsResponse {
    return {
      listPermissions: globalThis.Array.isArray(object?.listPermissions)
        ? object.listPermissions.map((e: any) => PermissionSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListPermissionsResponse): unknown {
    const obj: any = {};
    if (message.listPermissions?.length) {
      obj.listPermissions = message.listPermissions.map((e) => PermissionSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPermissionsResponse>, I>>(base?: I): ListPermissionsResponse {
    return ListPermissionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPermissionsResponse>, I>>(object: I): ListPermissionsResponse {
    const message = createBaseListPermissionsResponse();
    message.listPermissions = object.listPermissions?.map((e) => PermissionSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseCreatePermissionRequest(): CreatePermissionRequest {
  return {
    actionId: "",
    objectId: "",
    description: undefined,
    name: undefined,
    code: undefined,
    authoritiesIds: [],
    districtsIds: [],
    portsIds: [],
    shipsIds: [],
  };
}

export const CreatePermissionRequest = {
  encode(message: CreatePermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.actionId !== "") {
      writer.uint32(10).string(message.actionId);
    }
    if (message.objectId !== "") {
      writer.uint32(18).string(message.objectId);
    }
    if (message.description !== undefined) {
      StringValue.encode({ value: message.description! }, writer.uint32(26).fork()).ldelim();
    }
    if (message.name !== undefined) {
      StringValue.encode({ value: message.name! }, writer.uint32(34).fork()).ldelim();
    }
    if (message.code !== undefined) {
      StringValue.encode({ value: message.code! }, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.authoritiesIds) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.districtsIds) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.portsIds) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.shipsIds) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.objectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.code = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.authoritiesIds.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.districtsIds.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.portsIds.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.shipsIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePermissionRequest {
    return {
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
      description: isSet(object.description) ? String(object.description) : undefined,
      name: isSet(object.name) ? String(object.name) : undefined,
      code: isSet(object.code) ? String(object.code) : undefined,
      authoritiesIds: globalThis.Array.isArray(object?.authoritiesIds)
        ? object.authoritiesIds.map((e: any) => globalThis.String(e))
        : [],
      districtsIds: globalThis.Array.isArray(object?.districtsIds)
        ? object.districtsIds.map((e: any) => globalThis.String(e))
        : [],
      portsIds: globalThis.Array.isArray(object?.portsIds) ? object.portsIds.map((e: any) => globalThis.String(e)) : [],
      shipsIds: globalThis.Array.isArray(object?.shipsIds) ? object.shipsIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreatePermissionRequest): unknown {
    const obj: any = {};
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.authoritiesIds?.length) {
      obj.authoritiesIds = message.authoritiesIds;
    }
    if (message.districtsIds?.length) {
      obj.districtsIds = message.districtsIds;
    }
    if (message.portsIds?.length) {
      obj.portsIds = message.portsIds;
    }
    if (message.shipsIds?.length) {
      obj.shipsIds = message.shipsIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePermissionRequest>, I>>(base?: I): CreatePermissionRequest {
    return CreatePermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePermissionRequest>, I>>(object: I): CreatePermissionRequest {
    const message = createBaseCreatePermissionRequest();
    message.actionId = object.actionId ?? "";
    message.objectId = object.objectId ?? "";
    message.description = object.description ?? undefined;
    message.name = object.name ?? undefined;
    message.code = object.code ?? undefined;
    message.authoritiesIds = object.authoritiesIds?.map((e) => e) || [];
    message.districtsIds = object.districtsIds?.map((e) => e) || [];
    message.portsIds = object.portsIds?.map((e) => e) || [];
    message.shipsIds = object.shipsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreatePermissionResponse(): CreatePermissionResponse {
  return { permissionId: "" };
}

export const CreatePermissionResponse = {
  encode(message: CreatePermissionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permissionId !== "") {
      writer.uint32(10).string(message.permissionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePermissionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePermissionResponse {
    return { permissionId: isSet(object.permissionId) ? globalThis.String(object.permissionId) : "" };
  },

  toJSON(message: CreatePermissionResponse): unknown {
    const obj: any = {};
    if (message.permissionId !== "") {
      obj.permissionId = message.permissionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePermissionResponse>, I>>(base?: I): CreatePermissionResponse {
    return CreatePermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePermissionResponse>, I>>(object: I): CreatePermissionResponse {
    const message = createBaseCreatePermissionResponse();
    message.permissionId = object.permissionId ?? "";
    return message;
  },
};

function createBaseCreatePermissionsRequest(): CreatePermissionsRequest {
  return { permissions: [] };
}

export const CreatePermissionsRequest = {
  encode(message: CreatePermissionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.permissions) {
      CreatePermissionRequest.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePermissionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(CreatePermissionRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePermissionsRequest {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => CreatePermissionRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreatePermissionsRequest): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => CreatePermissionRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePermissionsRequest>, I>>(base?: I): CreatePermissionsRequest {
    return CreatePermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePermissionsRequest>, I>>(object: I): CreatePermissionsRequest {
    const message = createBaseCreatePermissionsRequest();
    message.permissions = object.permissions?.map((e) => CreatePermissionRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePermissionsResponse(): CreatePermissionsResponse {
  return { permissionsIds: [] };
}

export const CreatePermissionsResponse = {
  encode(message: CreatePermissionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.permissionsIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePermissionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionsIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePermissionsResponse {
    return {
      permissionsIds: globalThis.Array.isArray(object?.permissionsIds)
        ? object.permissionsIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CreatePermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissionsIds?.length) {
      obj.permissionsIds = message.permissionsIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePermissionsResponse>, I>>(base?: I): CreatePermissionsResponse {
    return CreatePermissionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePermissionsResponse>, I>>(object: I): CreatePermissionsResponse {
    const message = createBaseCreatePermissionsResponse();
    message.permissionsIds = object.permissionsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeletePermissionRequest(): DeletePermissionRequest {
  return { permissionId: "" };
}

export const DeletePermissionRequest = {
  encode(message: DeletePermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permissionId !== "") {
      writer.uint32(10).string(message.permissionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeletePermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePermissionRequest {
    return { permissionId: isSet(object.permissionId) ? globalThis.String(object.permissionId) : "" };
  },

  toJSON(message: DeletePermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionId !== "") {
      obj.permissionId = message.permissionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePermissionRequest>, I>>(base?: I): DeletePermissionRequest {
    return DeletePermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePermissionRequest>, I>>(object: I): DeletePermissionRequest {
    const message = createBaseDeletePermissionRequest();
    message.permissionId = object.permissionId ?? "";
    return message;
  },
};

export type PermissionServiceService = typeof PermissionServiceService;
export const PermissionServiceService = {
  getPermission: {
    path: "/apfish.v1.permission.PermissionService/GetPermission",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionRequest) => Buffer.from(PermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PermissionRequest.decode(value),
    responseSerialize: (value: Permission) => Buffer.from(Permission.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Permission.decode(value),
  },
  getPermissionSummary: {
    path: "/apfish.v1.permission.PermissionService/GetPermissionSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionRequest) => Buffer.from(PermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PermissionRequest.decode(value),
    responseSerialize: (value: PermissionSummaryResponse) =>
      Buffer.from(PermissionSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PermissionSummaryResponse.decode(value),
  },
  listPermissions: {
    path: "/apfish.v1.permission.PermissionService/ListPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListPermissionsRequest) => Buffer.from(ListPermissionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListPermissionsRequest.decode(value),
    responseSerialize: (value: ListPermissionsResponse) => Buffer.from(ListPermissionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListPermissionsResponse.decode(value),
  },
  createPermission: {
    path: "/apfish.v1.permission.PermissionService/CreatePermission",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePermissionRequest) => Buffer.from(CreatePermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreatePermissionRequest.decode(value),
    responseSerialize: (value: CreatePermissionResponse) =>
      Buffer.from(CreatePermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreatePermissionResponse.decode(value),
  },
  createPermissions: {
    path: "/apfish.v1.permission.PermissionService/CreatePermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePermissionsRequest) => Buffer.from(CreatePermissionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreatePermissionsRequest.decode(value),
    responseSerialize: (value: CreatePermissionsResponse) =>
      Buffer.from(CreatePermissionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreatePermissionsResponse.decode(value),
  },
  deletePermission: {
    path: "/apfish.v1.permission.PermissionService/DeletePermission",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeletePermissionRequest) => Buffer.from(DeletePermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeletePermissionRequest.decode(value),
    responseSerialize: (value: SuccessResponse) => Buffer.from(SuccessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SuccessResponse.decode(value),
  },
} as const;

export interface PermissionServiceServer extends UntypedServiceImplementation {
  getPermission: handleUnaryCall<PermissionRequest, Permission>;
  getPermissionSummary: handleUnaryCall<PermissionRequest, PermissionSummaryResponse>;
  listPermissions: handleUnaryCall<ListPermissionsRequest, ListPermissionsResponse>;
  createPermission: handleUnaryCall<CreatePermissionRequest, CreatePermissionResponse>;
  createPermissions: handleUnaryCall<CreatePermissionsRequest, CreatePermissionsResponse>;
  deletePermission: handleUnaryCall<DeletePermissionRequest, SuccessResponse>;
}

export interface PermissionServiceClient extends Client {
  getPermission(
    request: PermissionRequest,
    callback: (error: ServiceError | null, response: Permission) => void,
  ): ClientUnaryCall;
  getPermission(
    request: PermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Permission) => void,
  ): ClientUnaryCall;
  getPermission(
    request: PermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Permission) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  getPermissionSummary(
    request: PermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PermissionSummaryResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
  listPermissions(
    request: ListPermissionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListPermissionsResponse) => void,
  ): ClientUnaryCall;
  createPermission(
    request: CreatePermissionRequest,
    callback: (error: ServiceError | null, response: CreatePermissionResponse) => void,
  ): ClientUnaryCall;
  createPermission(
    request: CreatePermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreatePermissionResponse) => void,
  ): ClientUnaryCall;
  createPermission(
    request: CreatePermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreatePermissionResponse) => void,
  ): ClientUnaryCall;
  createPermissions(
    request: CreatePermissionsRequest,
    callback: (error: ServiceError | null, response: CreatePermissionsResponse) => void,
  ): ClientUnaryCall;
  createPermissions(
    request: CreatePermissionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreatePermissionsResponse) => void,
  ): ClientUnaryCall;
  createPermissions(
    request: CreatePermissionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreatePermissionsResponse) => void,
  ): ClientUnaryCall;
  deletePermission(
    request: DeletePermissionRequest,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
  deletePermission(
    request: DeletePermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
  deletePermission(
    request: DeletePermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
}

export const PermissionServiceClient = makeGenericClientConstructor(
  PermissionServiceService,
  "apfish.v1.permission.PermissionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PermissionServiceClient;
  service: typeof PermissionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
