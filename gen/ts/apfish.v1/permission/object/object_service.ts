// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/permission/object/object_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Object } from "./object";
import { ObjectSummary } from "./summary/object_summary";

export const protobufPackage = "apfish.v1.permission.object";

export interface ObjectRequest {
  id: Long;
}

export interface ObjectResponse {
  object: Object | undefined;
}

export interface ObjectSummaryResponse {
  object: ObjectSummary | undefined;
}

export interface ListObjectsRequest {
  /** Page number (1-based). Default: 1. */
  page: Long;
  /** Items per page (default: 20, max: 100). */
  perPage: Long;
}

export interface ListObjectsResponse {
  listObjects: ObjectSummary[];
  total: Long;
}

function createBaseObjectRequest(): ObjectRequest {
  return { id: Long.ZERO };
}

export const ObjectRequest = {
  encode(message: ObjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ObjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO };
  },

  toJSON(message: ObjectRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectRequest>, I>>(base?: I): ObjectRequest {
    return ObjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObjectRequest>, I>>(object: I): ObjectRequest {
    const message = createBaseObjectRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    return message;
  },
};

function createBaseObjectResponse(): ObjectResponse {
  return { object: undefined };
}

export const ObjectResponse = {
  encode(message: ObjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ObjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectResponse {
    return { object: isSet(object.object) ? Object.fromJSON(object.object) : undefined };
  },

  toJSON(message: ObjectResponse): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectResponse>, I>>(base?: I): ObjectResponse {
    return ObjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObjectResponse>, I>>(object: I): ObjectResponse {
    const message = createBaseObjectResponse();
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    return message;
  },
};

function createBaseObjectSummaryResponse(): ObjectSummaryResponse {
  return { object: undefined };
}

export const ObjectSummaryResponse = {
  encode(message: ObjectSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.object !== undefined) {
      ObjectSummary.encode(message.object, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ObjectSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.object = ObjectSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectSummaryResponse {
    return { object: isSet(object.object) ? ObjectSummary.fromJSON(object.object) : undefined };
  },

  toJSON(message: ObjectSummaryResponse): unknown {
    const obj: any = {};
    if (message.object !== undefined) {
      obj.object = ObjectSummary.toJSON(message.object);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectSummaryResponse>, I>>(base?: I): ObjectSummaryResponse {
    return ObjectSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObjectSummaryResponse>, I>>(object: I): ObjectSummaryResponse {
    const message = createBaseObjectSummaryResponse();
    message.object = (object.object !== undefined && object.object !== null)
      ? ObjectSummary.fromPartial(object.object)
      : undefined;
    return message;
  },
};

function createBaseListObjectsRequest(): ListObjectsRequest {
  return { page: Long.ZERO, perPage: Long.ZERO };
}

export const ListObjectsRequest = {
  encode(message: ListObjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.page.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.page);
    }
    if (!message.perPage.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListObjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListObjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListObjectsRequest {
    return {
      page: isSet(object.page) ? Long.fromValue(object.page) : Long.ZERO,
      perPage: isSet(object.perPage) ? Long.fromValue(object.perPage) : Long.ZERO,
    };
  },

  toJSON(message: ListObjectsRequest): unknown {
    const obj: any = {};
    if (!message.page.equals(Long.ZERO)) {
      obj.page = (message.page || Long.ZERO).toString();
    }
    if (!message.perPage.equals(Long.ZERO)) {
      obj.perPage = (message.perPage || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListObjectsRequest>, I>>(base?: I): ListObjectsRequest {
    return ListObjectsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListObjectsRequest>, I>>(object: I): ListObjectsRequest {
    const message = createBaseListObjectsRequest();
    message.page = (object.page !== undefined && object.page !== null) ? Long.fromValue(object.page) : Long.ZERO;
    message.perPage = (object.perPage !== undefined && object.perPage !== null)
      ? Long.fromValue(object.perPage)
      : Long.ZERO;
    return message;
  },
};

function createBaseListObjectsResponse(): ListObjectsResponse {
  return { listObjects: [], total: Long.ZERO };
}

export const ListObjectsResponse = {
  encode(message: ListObjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listObjects) {
      ObjectSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListObjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListObjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listObjects.push(ObjectSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListObjectsResponse {
    return {
      listObjects: globalThis.Array.isArray(object?.listObjects)
        ? object.listObjects.map((e: any) => ObjectSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,
    };
  },

  toJSON(message: ListObjectsResponse): unknown {
    const obj: any = {};
    if (message.listObjects?.length) {
      obj.listObjects = message.listObjects.map((e) => ObjectSummary.toJSON(e));
    }
    if (!message.total.equals(Long.ZERO)) {
      obj.total = (message.total || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListObjectsResponse>, I>>(base?: I): ListObjectsResponse {
    return ListObjectsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListObjectsResponse>, I>>(object: I): ListObjectsResponse {
    const message = createBaseListObjectsResponse();
    message.listObjects = object.listObjects?.map((e) => ObjectSummary.fromPartial(e)) || [];
    message.total = (object.total !== undefined && object.total !== null) ? Long.fromValue(object.total) : Long.ZERO;
    return message;
  },
};

export type ObjectServiceService = typeof ObjectServiceService;
export const ObjectServiceService = {
  getObject: {
    path: "/apfish.v1.permission.object.ObjectService/GetObject",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ObjectRequest) => Buffer.from(ObjectRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ObjectRequest.decode(value),
    responseSerialize: (value: ObjectResponse) => Buffer.from(ObjectResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ObjectResponse.decode(value),
  },
  getObjectSummary: {
    path: "/apfish.v1.permission.object.ObjectService/GetObjectSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ObjectRequest) => Buffer.from(ObjectRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ObjectRequest.decode(value),
    responseSerialize: (value: ObjectSummaryResponse) => Buffer.from(ObjectSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ObjectSummaryResponse.decode(value),
  },
  listObjects: {
    path: "/apfish.v1.permission.object.ObjectService/ListObjects",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListObjectsRequest) => Buffer.from(ListObjectsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListObjectsRequest.decode(value),
    responseSerialize: (value: ListObjectsResponse) => Buffer.from(ListObjectsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListObjectsResponse.decode(value),
  },
} as const;

export interface ObjectServiceServer extends UntypedServiceImplementation {
  getObject: handleUnaryCall<ObjectRequest, ObjectResponse>;
  getObjectSummary: handleUnaryCall<ObjectRequest, ObjectSummaryResponse>;
  listObjects: handleUnaryCall<ListObjectsRequest, ListObjectsResponse>;
}

export interface ObjectServiceClient extends Client {
  getObject(
    request: ObjectRequest,
    callback: (error: ServiceError | null, response: ObjectResponse) => void,
  ): ClientUnaryCall;
  getObject(
    request: ObjectRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ObjectResponse) => void,
  ): ClientUnaryCall;
  getObject(
    request: ObjectRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ObjectResponse) => void,
  ): ClientUnaryCall;
  getObjectSummary(
    request: ObjectRequest,
    callback: (error: ServiceError | null, response: ObjectSummaryResponse) => void,
  ): ClientUnaryCall;
  getObjectSummary(
    request: ObjectRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ObjectSummaryResponse) => void,
  ): ClientUnaryCall;
  getObjectSummary(
    request: ObjectRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ObjectSummaryResponse) => void,
  ): ClientUnaryCall;
  listObjects(
    request: ListObjectsRequest,
    callback: (error: ServiceError | null, response: ListObjectsResponse) => void,
  ): ClientUnaryCall;
  listObjects(
    request: ListObjectsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListObjectsResponse) => void,
  ): ClientUnaryCall;
  listObjects(
    request: ListObjectsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListObjectsResponse) => void,
  ): ClientUnaryCall;
}

export const ObjectServiceClient = makeGenericClientConstructor(
  ObjectServiceService,
  "apfish.v1.permission.object.ObjectService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ObjectServiceClient;
  service: typeof ObjectServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
