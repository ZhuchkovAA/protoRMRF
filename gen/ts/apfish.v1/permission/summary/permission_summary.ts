// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/permission/summary/permission_summary.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "apfish.v1.permission.summary";

export interface PermissionSummary {
  id: number;
  actionId: number;
  objectId: number;
  /** Human-readable explanation of the permission */
  description: string;
  /** Display name (e.g., "Read Inspections") */
  name: string;
  /** Machine-readable identifier (e.g., "inspection:read") */
  code: string;
  createdAt: Date | undefined;
}

export interface PermissionJwt {
  actionId: number;
  objectId: number;
  countriesId: number[];
  districtsId: number[];
  portsId: number[];
  shipsId: number[];
}

function createBasePermissionSummary(): PermissionSummary {
  return { id: 0, actionId: 0, objectId: 0, description: "", name: "", code: "", createdAt: undefined };
}

export const PermissionSummary = {
  encode(message: PermissionSummary, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.actionId !== 0) {
      writer.uint32(16).int32(message.actionId);
    }
    if (message.objectId !== 0) {
      writer.uint32(24).int32(message.objectId);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.code !== "") {
      writer.uint32(50).string(message.code);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionSummary {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.actionId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.objectId = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionSummary {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
      objectId: isSet(object.objectId) ? globalThis.Number(object.objectId) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: PermissionSummary): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.actionId !== 0) {
      obj.actionId = Math.round(message.actionId);
    }
    if (message.objectId !== 0) {
      obj.objectId = Math.round(message.objectId);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionSummary>, I>>(base?: I): PermissionSummary {
    return PermissionSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionSummary>, I>>(object: I): PermissionSummary {
    const message = createBasePermissionSummary();
    message.id = object.id ?? 0;
    message.actionId = object.actionId ?? 0;
    message.objectId = object.objectId ?? 0;
    message.description = object.description ?? "";
    message.name = object.name ?? "";
    message.code = object.code ?? "";
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBasePermissionJwt(): PermissionJwt {
  return { actionId: 0, objectId: 0, countriesId: [], districtsId: [], portsId: [], shipsId: [] };
}

export const PermissionJwt = {
  encode(message: PermissionJwt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.actionId !== 0) {
      writer.uint32(8).int32(message.actionId);
    }
    if (message.objectId !== 0) {
      writer.uint32(16).int32(message.objectId);
    }
    writer.uint32(26).fork();
    for (const v of message.countriesId) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.districtsId) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.portsId) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(50).fork();
    for (const v of message.shipsId) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PermissionJwt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionJwt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.actionId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.objectId = reader.int32();
          continue;
        case 3:
          if (tag === 24) {
            message.countriesId.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.countriesId.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.districtsId.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.districtsId.push(reader.int32());
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.portsId.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.portsId.push(reader.int32());
            }

            continue;
          }

          break;
        case 6:
          if (tag === 48) {
            message.shipsId.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.shipsId.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionJwt {
    return {
      actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
      objectId: isSet(object.objectId) ? globalThis.Number(object.objectId) : 0,
      countriesId: globalThis.Array.isArray(object?.countriesId)
        ? object.countriesId.map((e: any) => globalThis.Number(e))
        : [],
      districtsId: globalThis.Array.isArray(object?.districtsId)
        ? object.districtsId.map((e: any) => globalThis.Number(e))
        : [],
      portsId: globalThis.Array.isArray(object?.portsId) ? object.portsId.map((e: any) => globalThis.Number(e)) : [],
      shipsId: globalThis.Array.isArray(object?.shipsId) ? object.shipsId.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: PermissionJwt): unknown {
    const obj: any = {};
    if (message.actionId !== 0) {
      obj.actionId = Math.round(message.actionId);
    }
    if (message.objectId !== 0) {
      obj.objectId = Math.round(message.objectId);
    }
    if (message.countriesId?.length) {
      obj.countriesId = message.countriesId.map((e) => Math.round(e));
    }
    if (message.districtsId?.length) {
      obj.districtsId = message.districtsId.map((e) => Math.round(e));
    }
    if (message.portsId?.length) {
      obj.portsId = message.portsId.map((e) => Math.round(e));
    }
    if (message.shipsId?.length) {
      obj.shipsId = message.shipsId.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermissionJwt>, I>>(base?: I): PermissionJwt {
    return PermissionJwt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermissionJwt>, I>>(object: I): PermissionJwt {
    const message = createBasePermissionJwt();
    message.actionId = object.actionId ?? 0;
    message.objectId = object.objectId ?? 0;
    message.countriesId = object.countriesId?.map((e) => e) || [];
    message.districtsId = object.districtsId?.map((e) => e) || [];
    message.portsId = object.portsId?.map((e) => e) || [];
    message.shipsId = object.shipsId?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
