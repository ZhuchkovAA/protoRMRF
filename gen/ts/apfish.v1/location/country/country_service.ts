// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/location/country/country_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Country } from "./country";
import { CountrySummary } from "./summary/country_summary";

export const protobufPackage = "apfish.v1.location.country";

export interface CountryRequest {
  id: number;
}

export interface CountryResponse {
  country: Country | undefined;
}

export interface CountrySummaryResponse {
  country: CountrySummary | undefined;
}

export interface ListCountriesRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListCountriesResponse {
  listCountries: CountrySummary[];
  total: number;
}

function createBaseCountryRequest(): CountryRequest {
  return { id: 0 };
}

export const CountryRequest = {
  encode(message: CountryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CountryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountryRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CountryRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountryRequest>, I>>(base?: I): CountryRequest {
    return CountryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountryRequest>, I>>(object: I): CountryRequest {
    const message = createBaseCountryRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseCountryResponse(): CountryResponse {
  return { country: undefined };
}

export const CountryResponse = {
  encode(message: CountryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.country !== undefined) {
      Country.encode(message.country, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CountryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.country = Country.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountryResponse {
    return { country: isSet(object.country) ? Country.fromJSON(object.country) : undefined };
  },

  toJSON(message: CountryResponse): unknown {
    const obj: any = {};
    if (message.country !== undefined) {
      obj.country = Country.toJSON(message.country);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountryResponse>, I>>(base?: I): CountryResponse {
    return CountryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountryResponse>, I>>(object: I): CountryResponse {
    const message = createBaseCountryResponse();
    message.country = (object.country !== undefined && object.country !== null)
      ? Country.fromPartial(object.country)
      : undefined;
    return message;
  },
};

function createBaseCountrySummaryResponse(): CountrySummaryResponse {
  return { country: undefined };
}

export const CountrySummaryResponse = {
  encode(message: CountrySummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.country !== undefined) {
      CountrySummary.encode(message.country, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CountrySummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountrySummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.country = CountrySummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountrySummaryResponse {
    return { country: isSet(object.country) ? CountrySummary.fromJSON(object.country) : undefined };
  },

  toJSON(message: CountrySummaryResponse): unknown {
    const obj: any = {};
    if (message.country !== undefined) {
      obj.country = CountrySummary.toJSON(message.country);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountrySummaryResponse>, I>>(base?: I): CountrySummaryResponse {
    return CountrySummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountrySummaryResponse>, I>>(object: I): CountrySummaryResponse {
    const message = createBaseCountrySummaryResponse();
    message.country = (object.country !== undefined && object.country !== null)
      ? CountrySummary.fromPartial(object.country)
      : undefined;
    return message;
  },
};

function createBaseListCountriesRequest(): ListCountriesRequest {
  return { page: 0, perPage: 0 };
}

export const ListCountriesRequest = {
  encode(message: ListCountriesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCountriesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCountriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCountriesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListCountriesRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCountriesRequest>, I>>(base?: I): ListCountriesRequest {
    return ListCountriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCountriesRequest>, I>>(object: I): ListCountriesRequest {
    const message = createBaseListCountriesRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListCountriesResponse(): ListCountriesResponse {
  return { listCountries: [], total: 0 };
}

export const ListCountriesResponse = {
  encode(message: ListCountriesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listCountries) {
      CountrySummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListCountriesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCountriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listCountries.push(CountrySummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCountriesResponse {
    return {
      listCountries: globalThis.Array.isArray(object?.listCountries)
        ? object.listCountries.map((e: any) => CountrySummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListCountriesResponse): unknown {
    const obj: any = {};
    if (message.listCountries?.length) {
      obj.listCountries = message.listCountries.map((e) => CountrySummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCountriesResponse>, I>>(base?: I): ListCountriesResponse {
    return ListCountriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCountriesResponse>, I>>(object: I): ListCountriesResponse {
    const message = createBaseListCountriesResponse();
    message.listCountries = object.listCountries?.map((e) => CountrySummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type CountryServiceService = typeof CountryServiceService;
export const CountryServiceService = {
  getCountry: {
    path: "/apfish.v1.location.country.CountryService/GetCountry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CountryRequest) => Buffer.from(CountryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CountryRequest.decode(value),
    responseSerialize: (value: CountryResponse) => Buffer.from(CountryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CountryResponse.decode(value),
  },
  getCountrySummary: {
    path: "/apfish.v1.location.country.CountryService/GetCountrySummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CountryRequest) => Buffer.from(CountryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CountryRequest.decode(value),
    responseSerialize: (value: CountrySummaryResponse) => Buffer.from(CountrySummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CountrySummaryResponse.decode(value),
  },
  listCountries: {
    path: "/apfish.v1.location.country.CountryService/ListCountries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCountriesRequest) => Buffer.from(ListCountriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListCountriesRequest.decode(value),
    responseSerialize: (value: ListCountriesResponse) => Buffer.from(ListCountriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListCountriesResponse.decode(value),
  },
} as const;

export interface CountryServiceServer extends UntypedServiceImplementation {
  getCountry: handleUnaryCall<CountryRequest, CountryResponse>;
  getCountrySummary: handleUnaryCall<CountryRequest, CountrySummaryResponse>;
  listCountries: handleUnaryCall<ListCountriesRequest, ListCountriesResponse>;
}

export interface CountryServiceClient extends Client {
  getCountry(
    request: CountryRequest,
    callback: (error: ServiceError | null, response: CountryResponse) => void,
  ): ClientUnaryCall;
  getCountry(
    request: CountryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CountryResponse) => void,
  ): ClientUnaryCall;
  getCountry(
    request: CountryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CountryResponse) => void,
  ): ClientUnaryCall;
  getCountrySummary(
    request: CountryRequest,
    callback: (error: ServiceError | null, response: CountrySummaryResponse) => void,
  ): ClientUnaryCall;
  getCountrySummary(
    request: CountryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CountrySummaryResponse) => void,
  ): ClientUnaryCall;
  getCountrySummary(
    request: CountryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CountrySummaryResponse) => void,
  ): ClientUnaryCall;
  listCountries(
    request: ListCountriesRequest,
    callback: (error: ServiceError | null, response: ListCountriesResponse) => void,
  ): ClientUnaryCall;
  listCountries(
    request: ListCountriesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListCountriesResponse) => void,
  ): ClientUnaryCall;
  listCountries(
    request: ListCountriesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListCountriesResponse) => void,
  ): ClientUnaryCall;
}

export const CountryServiceClient = makeGenericClientConstructor(
  CountryServiceService,
  "apfish.v1.location.country.CountryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CountryServiceClient;
  service: typeof CountryServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
