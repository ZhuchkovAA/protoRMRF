// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/location/authority/authority_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Authority } from "./authority";
import { AuthoritySummary } from "./summary/authority_summary";

export const protobufPackage = "apfish.v1.location.authority";

export interface AuthorityRequest {
  id: string;
}

export interface AuthorityResponse {
  Authority: Authority | undefined;
}

export interface AuthoritySummaryResponse {
  Authority: AuthoritySummary | undefined;
}

export interface ListAuthoritiesRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListAuthoritiesResponse {
  listAuthorities: AuthoritySummary[];
  total: number;
}

function createBaseAuthorityRequest(): AuthorityRequest {
  return { id: "" };
}

export const AuthorityRequest = {
  encode(message: AuthorityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthorityRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorityRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AuthorityRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorityRequest>, I>>(base?: I): AuthorityRequest {
    return AuthorityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorityRequest>, I>>(object: I): AuthorityRequest {
    const message = createBaseAuthorityRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAuthorityResponse(): AuthorityResponse {
  return { Authority: undefined };
}

export const AuthorityResponse = {
  encode(message: AuthorityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Authority !== undefined) {
      Authority.encode(message.Authority, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthorityResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Authority = Authority.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorityResponse {
    return { Authority: isSet(object.Authority) ? Authority.fromJSON(object.Authority) : undefined };
  },

  toJSON(message: AuthorityResponse): unknown {
    const obj: any = {};
    if (message.Authority !== undefined) {
      obj.Authority = Authority.toJSON(message.Authority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorityResponse>, I>>(base?: I): AuthorityResponse {
    return AuthorityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorityResponse>, I>>(object: I): AuthorityResponse {
    const message = createBaseAuthorityResponse();
    message.Authority = (object.Authority !== undefined && object.Authority !== null)
      ? Authority.fromPartial(object.Authority)
      : undefined;
    return message;
  },
};

function createBaseAuthoritySummaryResponse(): AuthoritySummaryResponse {
  return { Authority: undefined };
}

export const AuthoritySummaryResponse = {
  encode(message: AuthoritySummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Authority !== undefined) {
      AuthoritySummary.encode(message.Authority, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthoritySummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthoritySummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Authority = AuthoritySummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthoritySummaryResponse {
    return { Authority: isSet(object.Authority) ? AuthoritySummary.fromJSON(object.Authority) : undefined };
  },

  toJSON(message: AuthoritySummaryResponse): unknown {
    const obj: any = {};
    if (message.Authority !== undefined) {
      obj.Authority = AuthoritySummary.toJSON(message.Authority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthoritySummaryResponse>, I>>(base?: I): AuthoritySummaryResponse {
    return AuthoritySummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthoritySummaryResponse>, I>>(object: I): AuthoritySummaryResponse {
    const message = createBaseAuthoritySummaryResponse();
    message.Authority = (object.Authority !== undefined && object.Authority !== null)
      ? AuthoritySummary.fromPartial(object.Authority)
      : undefined;
    return message;
  },
};

function createBaseListAuthoritiesRequest(): ListAuthoritiesRequest {
  return { page: 0, perPage: 0 };
}

export const ListAuthoritiesRequest = {
  encode(message: ListAuthoritiesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAuthoritiesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthoritiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAuthoritiesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListAuthoritiesRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAuthoritiesRequest>, I>>(base?: I): ListAuthoritiesRequest {
    return ListAuthoritiesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAuthoritiesRequest>, I>>(object: I): ListAuthoritiesRequest {
    const message = createBaseListAuthoritiesRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListAuthoritiesResponse(): ListAuthoritiesResponse {
  return { listAuthorities: [], total: 0 };
}

export const ListAuthoritiesResponse = {
  encode(message: ListAuthoritiesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listAuthorities) {
      AuthoritySummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAuthoritiesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthoritiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listAuthorities.push(AuthoritySummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAuthoritiesResponse {
    return {
      listAuthorities: globalThis.Array.isArray(object?.listAuthorities)
        ? object.listAuthorities.map((e: any) => AuthoritySummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListAuthoritiesResponse): unknown {
    const obj: any = {};
    if (message.listAuthorities?.length) {
      obj.listAuthorities = message.listAuthorities.map((e) => AuthoritySummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAuthoritiesResponse>, I>>(base?: I): ListAuthoritiesResponse {
    return ListAuthoritiesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAuthoritiesResponse>, I>>(object: I): ListAuthoritiesResponse {
    const message = createBaseListAuthoritiesResponse();
    message.listAuthorities = object.listAuthorities?.map((e) => AuthoritySummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type AuthorityServiceService = typeof AuthorityServiceService;
export const AuthorityServiceService = {
  getAuthority: {
    path: "/apfish.v1.location.authority.AuthorityService/GetAuthority",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthorityRequest) => Buffer.from(AuthorityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthorityRequest.decode(value),
    responseSerialize: (value: AuthorityResponse) => Buffer.from(AuthorityResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthorityResponse.decode(value),
  },
  getAuthoritySummary: {
    path: "/apfish.v1.location.authority.AuthorityService/GetAuthoritySummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthorityRequest) => Buffer.from(AuthorityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthorityRequest.decode(value),
    responseSerialize: (value: AuthoritySummaryResponse) =>
      Buffer.from(AuthoritySummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthoritySummaryResponse.decode(value),
  },
  listAuthorities: {
    path: "/apfish.v1.location.authority.AuthorityService/ListAuthorities",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAuthoritiesRequest) => Buffer.from(ListAuthoritiesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAuthoritiesRequest.decode(value),
    responseSerialize: (value: ListAuthoritiesResponse) => Buffer.from(ListAuthoritiesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAuthoritiesResponse.decode(value),
  },
} as const;

export interface AuthorityServiceServer extends UntypedServiceImplementation {
  getAuthority: handleUnaryCall<AuthorityRequest, AuthorityResponse>;
  getAuthoritySummary: handleUnaryCall<AuthorityRequest, AuthoritySummaryResponse>;
  listAuthorities: handleUnaryCall<ListAuthoritiesRequest, ListAuthoritiesResponse>;
}

export interface AuthorityServiceClient extends Client {
  getAuthority(
    request: AuthorityRequest,
    callback: (error: ServiceError | null, response: AuthorityResponse) => void,
  ): ClientUnaryCall;
  getAuthority(
    request: AuthorityRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthorityResponse) => void,
  ): ClientUnaryCall;
  getAuthority(
    request: AuthorityRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthorityResponse) => void,
  ): ClientUnaryCall;
  getAuthoritySummary(
    request: AuthorityRequest,
    callback: (error: ServiceError | null, response: AuthoritySummaryResponse) => void,
  ): ClientUnaryCall;
  getAuthoritySummary(
    request: AuthorityRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthoritySummaryResponse) => void,
  ): ClientUnaryCall;
  getAuthoritySummary(
    request: AuthorityRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthoritySummaryResponse) => void,
  ): ClientUnaryCall;
  listAuthorities(
    request: ListAuthoritiesRequest,
    callback: (error: ServiceError | null, response: ListAuthoritiesResponse) => void,
  ): ClientUnaryCall;
  listAuthorities(
    request: ListAuthoritiesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAuthoritiesResponse) => void,
  ): ClientUnaryCall;
  listAuthorities(
    request: ListAuthoritiesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAuthoritiesResponse) => void,
  ): ClientUnaryCall;
}

export const AuthorityServiceClient = makeGenericClientConstructor(
  AuthorityServiceService,
  "apfish.v1.location.authority.AuthorityService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthorityServiceClient;
  service: typeof AuthorityServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
