// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/user_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { User } from "./user";

export const protobufPackage = "apfish.v1.user";

/** Request to fetch a specific user. */
export interface UserRequest {
  /** Exact login identifier (e.g., "john.doe"). */
  login: string;
}

/** Response containing the requested user. */
export interface UserResponse {
  /** Full user profile data. */
  user: User | undefined;
}

/** Paginated request for user search. */
export interface ListUsersRequest {
  /** Optional login prefix filter (e.g., "joh"). */
  login: string;
  /** Page number (1-based). Default: 1. */
  page: Long;
  /** Items per page (default: 20, max: 100). */
  perPage: Long;
}

/** Paginated user list response. */
export interface ListUsersResponse {
  /** Users matching the query (max `per_page` entries). */
  users: User[];
  /** Total matching users (ignoring pagination). */
  total: Long;
}

function createBaseUserRequest(): UserRequest {
  return { login: "" };
}

export const UserRequest = {
  encode(message: UserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.login !== "") {
      writer.uint32(10).string(message.login);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.login = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return { login: isSet(object.login) ? globalThis.String(object.login) : "" };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.login !== "") {
      obj.login = message.login;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.login = object.login ?? "";
    return message;
  },
};

function createBaseUserResponse(): UserResponse {
  return { user: undefined };
}

export const UserResponse = {
  encode(message: UserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: UserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserResponse>, I>>(base?: I): UserResponse {
    return UserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserResponse>, I>>(object: I): UserResponse {
    const message = createBaseUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { login: "", page: Long.ZERO, perPage: Long.ZERO };
}

export const ListUsersRequest = {
  encode(message: ListUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.login !== "") {
      writer.uint32(10).string(message.login);
    }
    if (!message.page.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.page);
    }
    if (!message.perPage.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.login = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.page = reader.int64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.perPage = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersRequest {
    return {
      login: isSet(object.login) ? globalThis.String(object.login) : "",
      page: isSet(object.page) ? Long.fromValue(object.page) : Long.ZERO,
      perPage: isSet(object.perPage) ? Long.fromValue(object.perPage) : Long.ZERO,
    };
  },

  toJSON(message: ListUsersRequest): unknown {
    const obj: any = {};
    if (message.login !== "") {
      obj.login = message.login;
    }
    if (!message.page.equals(Long.ZERO)) {
      obj.page = (message.page || Long.ZERO).toString();
    }
    if (!message.perPage.equals(Long.ZERO)) {
      obj.perPage = (message.perPage || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersRequest>, I>>(base?: I): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersRequest>, I>>(object: I): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.login = object.login ?? "";
    message.page = (object.page !== undefined && object.page !== null) ? Long.fromValue(object.page) : Long.ZERO;
    message.perPage = (object.perPage !== undefined && object.perPage !== null)
      ? Long.fromValue(object.perPage)
      : Long.ZERO;
    return message;
  },
};

function createBaseListUsersResponse(): ListUsersResponse {
  return { users: [], total: Long.ZERO };
}

export const ListUsersResponse = {
  encode(message: ListUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,
    };
  },

  toJSON(message: ListUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (!message.total.equals(Long.ZERO)) {
      obj.total = (message.total || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersResponse>, I>>(base?: I): ListUsersResponse {
    return ListUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersResponse>, I>>(object: I): ListUsersResponse {
    const message = createBaseListUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.total = (object.total !== undefined && object.total !== null) ? Long.fromValue(object.total) : Long.ZERO;
    return message;
  },
};

/** User defines RPC methods for user management. */
export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  /**
   * GetUser retrieves a single user by their unique login.
   * Returns NOT_FOUND if the user does not exist.
   */
  getUser: {
    path: "/apfish.v1.user.UserService/GetUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserRequest) => Buffer.from(UserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserRequest.decode(value),
    responseSerialize: (value: UserResponse) => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserResponse.decode(value),
  },
  /**
   * ListUsers searches for users by login prefix (case-insensitive)
   * and returns paginated results.
   */
  listUsers: {
    path: "/apfish.v1.user.UserService/ListUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListUsersRequest) => Buffer.from(ListUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListUsersRequest.decode(value),
    responseSerialize: (value: ListUsersResponse) => Buffer.from(ListUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListUsersResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  /**
   * GetUser retrieves a single user by their unique login.
   * Returns NOT_FOUND if the user does not exist.
   */
  getUser: handleUnaryCall<UserRequest, UserResponse>;
  /**
   * ListUsers searches for users by login prefix (case-insensitive)
   * and returns paginated results.
   */
  listUsers: handleUnaryCall<ListUsersRequest, ListUsersResponse>;
}

export interface UserServiceClient extends Client {
  /**
   * GetUser retrieves a single user by their unique login.
   * Returns NOT_FOUND if the user does not exist.
   */
  getUser(
    request: UserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: UserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: UserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  /**
   * ListUsers searches for users by login prefix (case-insensitive)
   * and returns paginated results.
   */
  listUsers(
    request: ListUsersRequest,
    callback: (error: ServiceError | null, response: ListUsersResponse) => void,
  ): ClientUnaryCall;
  listUsers(
    request: ListUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListUsersResponse) => void,
  ): ClientUnaryCall;
  listUsers(
    request: ListUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListUsersResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(
  UserServiceService,
  "apfish.v1.user.UserService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
