// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/contact/contact_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Contact, ContactPatch } from "./contact";
import { ContactSummary } from "./summary/contact_summary";

export const protobufPackage = "apfish.v1.user.contact";

export interface ContactRequest {
  id: number;
}

export interface ContactResponse {
  contact: Contact | undefined;
}

export interface ContactSummaryResponse {
  contact: ContactSummary | undefined;
}

export interface ListContactsRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListContactsResponse {
  listContacts: ContactSummary[];
  total: number;
}

export interface UpdateContactRequest {
  contact: ContactPatch | undefined;
}

export interface UpdateContactResponse {
  success: boolean;
}

function createBaseContactRequest(): ContactRequest {
  return { id: 0 };
}

export const ContactRequest = {
  encode(message: ContactRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ContactRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ContactRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContactRequest>, I>>(base?: I): ContactRequest {
    return ContactRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContactRequest>, I>>(object: I): ContactRequest {
    const message = createBaseContactRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseContactResponse(): ContactResponse {
  return { contact: undefined };
}

export const ContactResponse = {
  encode(message: ContactResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contact !== undefined) {
      Contact.encode(message.contact, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ContactResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contact = Contact.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactResponse {
    return { contact: isSet(object.contact) ? Contact.fromJSON(object.contact) : undefined };
  },

  toJSON(message: ContactResponse): unknown {
    const obj: any = {};
    if (message.contact !== undefined) {
      obj.contact = Contact.toJSON(message.contact);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContactResponse>, I>>(base?: I): ContactResponse {
    return ContactResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContactResponse>, I>>(object: I): ContactResponse {
    const message = createBaseContactResponse();
    message.contact = (object.contact !== undefined && object.contact !== null)
      ? Contact.fromPartial(object.contact)
      : undefined;
    return message;
  },
};

function createBaseContactSummaryResponse(): ContactSummaryResponse {
  return { contact: undefined };
}

export const ContactSummaryResponse = {
  encode(message: ContactSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contact !== undefined) {
      ContactSummary.encode(message.contact, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ContactSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contact = ContactSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactSummaryResponse {
    return { contact: isSet(object.contact) ? ContactSummary.fromJSON(object.contact) : undefined };
  },

  toJSON(message: ContactSummaryResponse): unknown {
    const obj: any = {};
    if (message.contact !== undefined) {
      obj.contact = ContactSummary.toJSON(message.contact);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContactSummaryResponse>, I>>(base?: I): ContactSummaryResponse {
    return ContactSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContactSummaryResponse>, I>>(object: I): ContactSummaryResponse {
    const message = createBaseContactSummaryResponse();
    message.contact = (object.contact !== undefined && object.contact !== null)
      ? ContactSummary.fromPartial(object.contact)
      : undefined;
    return message;
  },
};

function createBaseListContactsRequest(): ListContactsRequest {
  return { page: 0, perPage: 0 };
}

export const ListContactsRequest = {
  encode(message: ListContactsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListContactsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContactsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListContactsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListContactsRequest>, I>>(base?: I): ListContactsRequest {
    return ListContactsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListContactsRequest>, I>>(object: I): ListContactsRequest {
    const message = createBaseListContactsRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListContactsResponse(): ListContactsResponse {
  return { listContacts: [], total: 0 };
}

export const ListContactsResponse = {
  encode(message: ListContactsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listContacts) {
      ContactSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListContactsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listContacts.push(ContactSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContactsResponse {
    return {
      listContacts: globalThis.Array.isArray(object?.listContacts)
        ? object.listContacts.map((e: any) => ContactSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListContactsResponse): unknown {
    const obj: any = {};
    if (message.listContacts?.length) {
      obj.listContacts = message.listContacts.map((e) => ContactSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListContactsResponse>, I>>(base?: I): ListContactsResponse {
    return ListContactsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListContactsResponse>, I>>(object: I): ListContactsResponse {
    const message = createBaseListContactsResponse();
    message.listContacts = object.listContacts?.map((e) => ContactSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseUpdateContactRequest(): UpdateContactRequest {
  return { contact: undefined };
}

export const UpdateContactRequest = {
  encode(message: UpdateContactRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contact !== undefined) {
      ContactPatch.encode(message.contact, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateContactRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contact = ContactPatch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContactRequest {
    return { contact: isSet(object.contact) ? ContactPatch.fromJSON(object.contact) : undefined };
  },

  toJSON(message: UpdateContactRequest): unknown {
    const obj: any = {};
    if (message.contact !== undefined) {
      obj.contact = ContactPatch.toJSON(message.contact);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateContactRequest>, I>>(base?: I): UpdateContactRequest {
    return UpdateContactRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateContactRequest>, I>>(object: I): UpdateContactRequest {
    const message = createBaseUpdateContactRequest();
    message.contact = (object.contact !== undefined && object.contact !== null)
      ? ContactPatch.fromPartial(object.contact)
      : undefined;
    return message;
  },
};

function createBaseUpdateContactResponse(): UpdateContactResponse {
  return { success: false };
}

export const UpdateContactResponse = {
  encode(message: UpdateContactResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateContactResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContactResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContactResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateContactResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateContactResponse>, I>>(base?: I): UpdateContactResponse {
    return UpdateContactResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateContactResponse>, I>>(object: I): UpdateContactResponse {
    const message = createBaseUpdateContactResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type ContactServiceService = typeof ContactServiceService;
export const ContactServiceService = {
  getContact: {
    path: "/apfish.v1.user.contact.ContactService/GetContact",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ContactRequest) => Buffer.from(ContactRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ContactRequest.decode(value),
    responseSerialize: (value: ContactResponse) => Buffer.from(ContactResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ContactResponse.decode(value),
  },
  getContactSummary: {
    path: "/apfish.v1.user.contact.ContactService/GetContactSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ContactRequest) => Buffer.from(ContactRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ContactRequest.decode(value),
    responseSerialize: (value: ContactSummaryResponse) => Buffer.from(ContactSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ContactSummaryResponse.decode(value),
  },
  listContacts: {
    path: "/apfish.v1.user.contact.ContactService/ListContacts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListContactsRequest) => Buffer.from(ListContactsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListContactsRequest.decode(value),
    responseSerialize: (value: ListContactsResponse) => Buffer.from(ListContactsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListContactsResponse.decode(value),
  },
  updateContact: {
    path: "/apfish.v1.user.contact.ContactService/UpdateContact",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateContactRequest) => Buffer.from(UpdateContactRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateContactRequest.decode(value),
    responseSerialize: (value: UpdateContactResponse) => Buffer.from(UpdateContactResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateContactResponse.decode(value),
  },
} as const;

export interface ContactServiceServer extends UntypedServiceImplementation {
  getContact: handleUnaryCall<ContactRequest, ContactResponse>;
  getContactSummary: handleUnaryCall<ContactRequest, ContactSummaryResponse>;
  listContacts: handleUnaryCall<ListContactsRequest, ListContactsResponse>;
  updateContact: handleUnaryCall<UpdateContactRequest, UpdateContactResponse>;
}

export interface ContactServiceClient extends Client {
  getContact(
    request: ContactRequest,
    callback: (error: ServiceError | null, response: ContactResponse) => void,
  ): ClientUnaryCall;
  getContact(
    request: ContactRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ContactResponse) => void,
  ): ClientUnaryCall;
  getContact(
    request: ContactRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ContactResponse) => void,
  ): ClientUnaryCall;
  getContactSummary(
    request: ContactRequest,
    callback: (error: ServiceError | null, response: ContactSummaryResponse) => void,
  ): ClientUnaryCall;
  getContactSummary(
    request: ContactRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ContactSummaryResponse) => void,
  ): ClientUnaryCall;
  getContactSummary(
    request: ContactRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ContactSummaryResponse) => void,
  ): ClientUnaryCall;
  listContacts(
    request: ListContactsRequest,
    callback: (error: ServiceError | null, response: ListContactsResponse) => void,
  ): ClientUnaryCall;
  listContacts(
    request: ListContactsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListContactsResponse) => void,
  ): ClientUnaryCall;
  listContacts(
    request: ListContactsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListContactsResponse) => void,
  ): ClientUnaryCall;
  updateContact(
    request: UpdateContactRequest,
    callback: (error: ServiceError | null, response: UpdateContactResponse) => void,
  ): ClientUnaryCall;
  updateContact(
    request: UpdateContactRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateContactResponse) => void,
  ): ClientUnaryCall;
  updateContact(
    request: UpdateContactRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateContactResponse) => void,
  ): ClientUnaryCall;
}

export const ContactServiceClient = makeGenericClientConstructor(
  ContactServiceService,
  "apfish.v1.user.contact.ContactService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ContactServiceClient;
  service: typeof ContactServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
