// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/contact/type/type_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { TypeSummary } from "./summary/type_summary";
import { Type } from "./type";

export const protobufPackage = "apfish.v1.user.contact.type";

export interface TypeRequest {
  id: number;
}

export interface TypeResponse {
  type: Type | undefined;
}

export interface TypeSummaryResponse {
  type: TypeSummary | undefined;
}

export interface ListTypesRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListTypesResponse {
  listTypes: TypeSummary[];
  total: number;
}

function createBaseTypeRequest(): TypeRequest {
  return { id: 0 };
}

export const TypeRequest = {
  encode(message: TypeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TypeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TypeRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: TypeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TypeRequest>, I>>(base?: I): TypeRequest {
    return TypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TypeRequest>, I>>(object: I): TypeRequest {
    const message = createBaseTypeRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseTypeResponse(): TypeResponse {
  return { type: undefined };
}

export const TypeResponse = {
  encode(message: TypeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== undefined) {
      Type.encode(message.type, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TypeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = Type.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TypeResponse {
    return { type: isSet(object.type) ? Type.fromJSON(object.type) : undefined };
  },

  toJSON(message: TypeResponse): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = Type.toJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TypeResponse>, I>>(base?: I): TypeResponse {
    return TypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TypeResponse>, I>>(object: I): TypeResponse {
    const message = createBaseTypeResponse();
    message.type = (object.type !== undefined && object.type !== null) ? Type.fromPartial(object.type) : undefined;
    return message;
  },
};

function createBaseTypeSummaryResponse(): TypeSummaryResponse {
  return { type: undefined };
}

export const TypeSummaryResponse = {
  encode(message: TypeSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== undefined) {
      TypeSummary.encode(message.type, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TypeSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTypeSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = TypeSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TypeSummaryResponse {
    return { type: isSet(object.type) ? TypeSummary.fromJSON(object.type) : undefined };
  },

  toJSON(message: TypeSummaryResponse): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = TypeSummary.toJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TypeSummaryResponse>, I>>(base?: I): TypeSummaryResponse {
    return TypeSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TypeSummaryResponse>, I>>(object: I): TypeSummaryResponse {
    const message = createBaseTypeSummaryResponse();
    message.type = (object.type !== undefined && object.type !== null)
      ? TypeSummary.fromPartial(object.type)
      : undefined;
    return message;
  },
};

function createBaseListTypesRequest(): ListTypesRequest {
  return { page: 0, perPage: 0 };
}

export const ListTypesRequest = {
  encode(message: ListTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTypesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListTypesRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTypesRequest>, I>>(base?: I): ListTypesRequest {
    return ListTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTypesRequest>, I>>(object: I): ListTypesRequest {
    const message = createBaseListTypesRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListTypesResponse(): ListTypesResponse {
  return { listTypes: [], total: 0 };
}

export const ListTypesResponse = {
  encode(message: ListTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listTypes) {
      TypeSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listTypes.push(TypeSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTypesResponse {
    return {
      listTypes: globalThis.Array.isArray(object?.listTypes)
        ? object.listTypes.map((e: any) => TypeSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListTypesResponse): unknown {
    const obj: any = {};
    if (message.listTypes?.length) {
      obj.listTypes = message.listTypes.map((e) => TypeSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTypesResponse>, I>>(base?: I): ListTypesResponse {
    return ListTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTypesResponse>, I>>(object: I): ListTypesResponse {
    const message = createBaseListTypesResponse();
    message.listTypes = object.listTypes?.map((e) => TypeSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type TypeServiceService = typeof TypeServiceService;
export const TypeServiceService = {
  getType: {
    path: "/apfish.v1.user.contact.type.TypeService/GetType",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TypeRequest) => Buffer.from(TypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TypeRequest.decode(value),
    responseSerialize: (value: TypeResponse) => Buffer.from(TypeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TypeResponse.decode(value),
  },
  getTypeSummary: {
    path: "/apfish.v1.user.contact.type.TypeService/GetTypeSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TypeRequest) => Buffer.from(TypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TypeRequest.decode(value),
    responseSerialize: (value: TypeSummaryResponse) => Buffer.from(TypeSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TypeSummaryResponse.decode(value),
  },
  listTypes: {
    path: "/apfish.v1.user.contact.type.TypeService/ListTypes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTypesRequest) => Buffer.from(ListTypesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTypesRequest.decode(value),
    responseSerialize: (value: ListTypesResponse) => Buffer.from(ListTypesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTypesResponse.decode(value),
  },
} as const;

export interface TypeServiceServer extends UntypedServiceImplementation {
  getType: handleUnaryCall<TypeRequest, TypeResponse>;
  getTypeSummary: handleUnaryCall<TypeRequest, TypeSummaryResponse>;
  listTypes: handleUnaryCall<ListTypesRequest, ListTypesResponse>;
}

export interface TypeServiceClient extends Client {
  getType(
    request: TypeRequest,
    callback: (error: ServiceError | null, response: TypeResponse) => void,
  ): ClientUnaryCall;
  getType(
    request: TypeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TypeResponse) => void,
  ): ClientUnaryCall;
  getType(
    request: TypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TypeResponse) => void,
  ): ClientUnaryCall;
  getTypeSummary(
    request: TypeRequest,
    callback: (error: ServiceError | null, response: TypeSummaryResponse) => void,
  ): ClientUnaryCall;
  getTypeSummary(
    request: TypeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TypeSummaryResponse) => void,
  ): ClientUnaryCall;
  getTypeSummary(
    request: TypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TypeSummaryResponse) => void,
  ): ClientUnaryCall;
  listTypes(
    request: ListTypesRequest,
    callback: (error: ServiceError | null, response: ListTypesResponse) => void,
  ): ClientUnaryCall;
  listTypes(
    request: ListTypesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTypesResponse) => void,
  ): ClientUnaryCall;
  listTypes(
    request: ListTypesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTypesResponse) => void,
  ): ClientUnaryCall;
}

export const TypeServiceClient = makeGenericClientConstructor(
  TypeServiceService,
  "apfish.v1.user.contact.type.TypeService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TypeServiceClient;
  service: typeof TypeServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
