// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/role/role_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Role } from "./role";
import { RoleSummary } from "./summary/role_summary";

export const protobufPackage = "apfish.v1.user.role";

export interface RoleRequest {
  id: string;
}

export interface RoleResponse {
  role: Role | undefined;
}

export interface RoleSummaryResponse {
  role: RoleSummary | undefined;
}

export interface ListRolesRequest {
  /** Page number (1-based). Default: 1. */
  page: number;
  /** Items per page (default: 20, max: 100). */
  perPage: number;
}

export interface ListRolesResponse {
  listRoles: RoleSummary[];
  total: number;
}

function createBaseRoleRequest(): RoleRequest {
  return { id: "" };
}

export const RoleRequest = {
  encode(message: RoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RoleRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleRequest>, I>>(base?: I): RoleRequest {
    return RoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleRequest>, I>>(object: I): RoleRequest {
    const message = createBaseRoleRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRoleResponse(): RoleResponse {
  return { role: undefined };
}

export const RoleResponse = {
  encode(message: RoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== undefined) {
      Role.encode(message.role, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.role = Role.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleResponse {
    return { role: isSet(object.role) ? Role.fromJSON(object.role) : undefined };
  },

  toJSON(message: RoleResponse): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = Role.toJSON(message.role);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleResponse>, I>>(base?: I): RoleResponse {
    return RoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleResponse>, I>>(object: I): RoleResponse {
    const message = createBaseRoleResponse();
    message.role = (object.role !== undefined && object.role !== null) ? Role.fromPartial(object.role) : undefined;
    return message;
  },
};

function createBaseRoleSummaryResponse(): RoleSummaryResponse {
  return { role: undefined };
}

export const RoleSummaryResponse = {
  encode(message: RoleSummaryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== undefined) {
      RoleSummary.encode(message.role, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleSummaryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.role = RoleSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleSummaryResponse {
    return { role: isSet(object.role) ? RoleSummary.fromJSON(object.role) : undefined };
  },

  toJSON(message: RoleSummaryResponse): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = RoleSummary.toJSON(message.role);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleSummaryResponse>, I>>(base?: I): RoleSummaryResponse {
    return RoleSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleSummaryResponse>, I>>(object: I): RoleSummaryResponse {
    const message = createBaseRoleSummaryResponse();
    message.role = (object.role !== undefined && object.role !== null)
      ? RoleSummary.fromPartial(object.role)
      : undefined;
    return message;
  },
};

function createBaseListRolesRequest(): ListRolesRequest {
  return { page: 0, perPage: 0 };
}

export const ListRolesRequest = {
  encode(message: ListRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRolesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: ListRolesRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRolesRequest>, I>>(base?: I): ListRolesRequest {
    return ListRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRolesRequest>, I>>(object: I): ListRolesRequest {
    const message = createBaseListRolesRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseListRolesResponse(): ListRolesResponse {
  return { listRoles: [], total: 0 };
}

export const ListRolesResponse = {
  encode(message: ListRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.listRoles) {
      RoleSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listRoles.push(RoleSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRolesResponse {
    return {
      listRoles: globalThis.Array.isArray(object?.listRoles)
        ? object.listRoles.map((e: any) => RoleSummary.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListRolesResponse): unknown {
    const obj: any = {};
    if (message.listRoles?.length) {
      obj.listRoles = message.listRoles.map((e) => RoleSummary.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRolesResponse>, I>>(base?: I): ListRolesResponse {
    return ListRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRolesResponse>, I>>(object: I): ListRolesResponse {
    const message = createBaseListRolesResponse();
    message.listRoles = object.listRoles?.map((e) => RoleSummary.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type RoleServiceService = typeof RoleServiceService;
export const RoleServiceService = {
  getRole: {
    path: "/apfish.v1.user.role.RoleService/GetRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RoleRequest) => Buffer.from(RoleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RoleRequest.decode(value),
    responseSerialize: (value: RoleResponse) => Buffer.from(RoleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RoleResponse.decode(value),
  },
  getRoleSummary: {
    path: "/apfish.v1.user.role.RoleService/GetRoleSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RoleRequest) => Buffer.from(RoleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RoleRequest.decode(value),
    responseSerialize: (value: RoleSummaryResponse) => Buffer.from(RoleSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RoleSummaryResponse.decode(value),
  },
  listRoles: {
    path: "/apfish.v1.user.role.RoleService/ListRoles",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRolesRequest) => Buffer.from(ListRolesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRolesRequest.decode(value),
    responseSerialize: (value: ListRolesResponse) => Buffer.from(ListRolesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListRolesResponse.decode(value),
  },
} as const;

export interface RoleServiceServer extends UntypedServiceImplementation {
  getRole: handleUnaryCall<RoleRequest, RoleResponse>;
  getRoleSummary: handleUnaryCall<RoleRequest, RoleSummaryResponse>;
  listRoles: handleUnaryCall<ListRolesRequest, ListRolesResponse>;
}

export interface RoleServiceClient extends Client {
  getRole(
    request: RoleRequest,
    callback: (error: ServiceError | null, response: RoleResponse) => void,
  ): ClientUnaryCall;
  getRole(
    request: RoleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RoleResponse) => void,
  ): ClientUnaryCall;
  getRole(
    request: RoleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RoleResponse) => void,
  ): ClientUnaryCall;
  getRoleSummary(
    request: RoleRequest,
    callback: (error: ServiceError | null, response: RoleSummaryResponse) => void,
  ): ClientUnaryCall;
  getRoleSummary(
    request: RoleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RoleSummaryResponse) => void,
  ): ClientUnaryCall;
  getRoleSummary(
    request: RoleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RoleSummaryResponse) => void,
  ): ClientUnaryCall;
  listRoles(
    request: ListRolesRequest,
    callback: (error: ServiceError | null, response: ListRolesResponse) => void,
  ): ClientUnaryCall;
  listRoles(
    request: ListRolesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListRolesResponse) => void,
  ): ClientUnaryCall;
  listRoles(
    request: ListRolesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListRolesResponse) => void,
  ): ClientUnaryCall;
}

export const RoleServiceClient = makeGenericClientConstructor(
  RoleServiceService,
  "apfish.v1.user.role.RoleService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RoleServiceClient;
  service: typeof RoleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
