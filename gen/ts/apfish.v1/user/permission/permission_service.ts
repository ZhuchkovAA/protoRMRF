// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/permission/permission_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { SuccessResponse } from "../../helper/helper";
import { PermissionSummary } from "../../permission/summary/permission_summary";

export const protobufPackage = "apfish.v1.user.permission";

export interface ListUserPermissionRequest {
  login: string;
}

export interface ListUserPermissionResponse {
  userPermissions: PermissionSummary[];
}

export interface AssignPermissionsRequest {
  login: string;
  permissionsIds: string[];
}

function createBaseListUserPermissionRequest(): ListUserPermissionRequest {
  return { login: "" };
}

export const ListUserPermissionRequest = {
  encode(message: ListUserPermissionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.login !== "") {
      writer.uint32(10).string(message.login);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserPermissionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.login = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserPermissionRequest {
    return { login: isSet(object.login) ? globalThis.String(object.login) : "" };
  },

  toJSON(message: ListUserPermissionRequest): unknown {
    const obj: any = {};
    if (message.login !== "") {
      obj.login = message.login;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserPermissionRequest>, I>>(base?: I): ListUserPermissionRequest {
    return ListUserPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserPermissionRequest>, I>>(object: I): ListUserPermissionRequest {
    const message = createBaseListUserPermissionRequest();
    message.login = object.login ?? "";
    return message;
  },
};

function createBaseListUserPermissionResponse(): ListUserPermissionResponse {
  return { userPermissions: [] };
}

export const ListUserPermissionResponse = {
  encode(message: ListUserPermissionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.userPermissions) {
      PermissionSummary.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserPermissionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userPermissions.push(PermissionSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserPermissionResponse {
    return {
      userPermissions: globalThis.Array.isArray(object?.userPermissions)
        ? object.userPermissions.map((e: any) => PermissionSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListUserPermissionResponse): unknown {
    const obj: any = {};
    if (message.userPermissions?.length) {
      obj.userPermissions = message.userPermissions.map((e) => PermissionSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserPermissionResponse>, I>>(base?: I): ListUserPermissionResponse {
    return ListUserPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserPermissionResponse>, I>>(object: I): ListUserPermissionResponse {
    const message = createBaseListUserPermissionResponse();
    message.userPermissions = object.userPermissions?.map((e) => PermissionSummary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAssignPermissionsRequest(): AssignPermissionsRequest {
  return { login: "", permissionsIds: [] };
}

export const AssignPermissionsRequest = {
  encode(message: AssignPermissionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.login !== "") {
      writer.uint32(10).string(message.login);
    }
    for (const v of message.permissionsIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AssignPermissionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.login = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permissionsIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignPermissionsRequest {
    return {
      login: isSet(object.login) ? globalThis.String(object.login) : "",
      permissionsIds: globalThis.Array.isArray(object?.permissionsIds)
        ? object.permissionsIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AssignPermissionsRequest): unknown {
    const obj: any = {};
    if (message.login !== "") {
      obj.login = message.login;
    }
    if (message.permissionsIds?.length) {
      obj.permissionsIds = message.permissionsIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignPermissionsRequest>, I>>(base?: I): AssignPermissionsRequest {
    return AssignPermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignPermissionsRequest>, I>>(object: I): AssignPermissionsRequest {
    const message = createBaseAssignPermissionsRequest();
    message.login = object.login ?? "";
    message.permissionsIds = object.permissionsIds?.map((e) => e) || [];
    return message;
  },
};

export type UserPermissionServiceService = typeof UserPermissionServiceService;
export const UserPermissionServiceService = {
  listUserPermissions: {
    path: "/apfish.v1.user.permission.UserPermissionService/ListUserPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListUserPermissionRequest) =>
      Buffer.from(ListUserPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListUserPermissionRequest.decode(value),
    responseSerialize: (value: ListUserPermissionResponse) =>
      Buffer.from(ListUserPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListUserPermissionResponse.decode(value),
  },
  assignPermissions: {
    path: "/apfish.v1.user.permission.UserPermissionService/AssignPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AssignPermissionsRequest) => Buffer.from(AssignPermissionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AssignPermissionsRequest.decode(value),
    responseSerialize: (value: SuccessResponse) => Buffer.from(SuccessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SuccessResponse.decode(value),
  },
} as const;

export interface UserPermissionServiceServer extends UntypedServiceImplementation {
  listUserPermissions: handleUnaryCall<ListUserPermissionRequest, ListUserPermissionResponse>;
  assignPermissions: handleUnaryCall<AssignPermissionsRequest, SuccessResponse>;
}

export interface UserPermissionServiceClient extends Client {
  listUserPermissions(
    request: ListUserPermissionRequest,
    callback: (error: ServiceError | null, response: ListUserPermissionResponse) => void,
  ): ClientUnaryCall;
  listUserPermissions(
    request: ListUserPermissionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListUserPermissionResponse) => void,
  ): ClientUnaryCall;
  listUserPermissions(
    request: ListUserPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListUserPermissionResponse) => void,
  ): ClientUnaryCall;
  assignPermissions(
    request: AssignPermissionsRequest,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
  assignPermissions(
    request: AssignPermissionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
  assignPermissions(
    request: AssignPermissionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SuccessResponse) => void,
  ): ClientUnaryCall;
}

export const UserPermissionServiceClient = makeGenericClientConstructor(
  UserPermissionServiceService,
  "apfish.v1.user.permission.UserPermissionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserPermissionServiceClient;
  service: typeof UserPermissionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
