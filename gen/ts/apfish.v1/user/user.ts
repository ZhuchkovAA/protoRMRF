// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.1
// source: apfish.v1/user/user.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { PermissionSummary } from "../permission/summary/permission_summary";
import { ContactSummary } from "./contact/contact/summary/contact_summary";
import { RoleSummary } from "./role/summary/role_summary";

export const protobufPackage = "apfish.v1.user";

/** Represents a user account in the system. */
export interface User {
  /** Unique system-generated ID. */
  id: Long;
  /** Unique login identifier. */
  login: string;
  /** Formal name (e.g., "John Doe"). */
  officialName: string;
  /** Assigned role. */
  role:
    | RoleSummary
    | undefined;
  /** When the user was created. */
  createdAt:
    | Date
    | undefined;
  /** Login of the creator (e.g., "admin"). */
  createdByLogin: string;
  /** User's contact methods. */
  contacts: ContactSummary[];
  /** Direct permissions (overrides role). */
  permissions: PermissionSummary[];
}

function createBaseUser(): User {
  return {
    id: Long.ZERO,
    login: "",
    officialName: "",
    role: undefined,
    createdAt: undefined,
    createdByLogin: "",
    contacts: [],
    permissions: [],
  };
}

export const User = {
  encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id);
    }
    if (message.login !== "") {
      writer.uint32(18).string(message.login);
    }
    if (message.officialName !== "") {
      writer.uint32(26).string(message.officialName);
    }
    if (message.role !== undefined) {
      RoleSummary.encode(message.role, writer.uint32(34).fork()).ldelim();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.createdByLogin !== "") {
      writer.uint32(50).string(message.createdByLogin);
    }
    for (const v of message.contacts) {
      ContactSummary.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    for (const v of message.permissions) {
      PermissionSummary.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.login = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.officialName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.role = RoleSummary.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdByLogin = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.contacts.push(ContactSummary.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.permissions.push(PermissionSummary.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      login: isSet(object.login) ? globalThis.String(object.login) : "",
      officialName: isSet(object.officialName) ? globalThis.String(object.officialName) : "",
      role: isSet(object.role) ? RoleSummary.fromJSON(object.role) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      createdByLogin: isSet(object.createdByLogin) ? globalThis.String(object.createdByLogin) : "",
      contacts: globalThis.Array.isArray(object?.contacts)
        ? object.contacts.map((e: any) => ContactSummary.fromJSON(e))
        : [],
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => PermissionSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.login !== "") {
      obj.login = message.login;
    }
    if (message.officialName !== "") {
      obj.officialName = message.officialName;
    }
    if (message.role !== undefined) {
      obj.role = RoleSummary.toJSON(message.role);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.createdByLogin !== "") {
      obj.createdByLogin = message.createdByLogin;
    }
    if (message.contacts?.length) {
      obj.contacts = message.contacts.map((e) => ContactSummary.toJSON(e));
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => PermissionSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.login = object.login ?? "";
    message.officialName = object.officialName ?? "";
    message.role = (object.role !== undefined && object.role !== null)
      ? RoleSummary.fromPartial(object.role)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.createdByLogin = object.createdByLogin ?? "";
    message.contacts = object.contacts?.map((e) => ContactSummary.fromPartial(e)) || [];
    message.permissions = object.permissions?.map((e) => PermissionSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
