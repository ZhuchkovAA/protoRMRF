// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish.v1/ship/captain/captain_service.proto

package ship_captain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaptainService_GetCaptain_FullMethodName        = "/apfish.v1.ship.captain.CaptainService/GetCaptain"
	CaptainService_GetCaptainSummary_FullMethodName = "/apfish.v1.ship.captain.CaptainService/GetCaptainSummary"
	CaptainService_ListCaptains_FullMethodName      = "/apfish.v1.ship.captain.CaptainService/ListCaptains"
)

// CaptainServiceClient is the client API for CaptainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptainServiceClient interface {
	GetCaptain(ctx context.Context, in *CaptainRequest, opts ...grpc.CallOption) (*Captain, error)
	GetCaptainSummary(ctx context.Context, in *CaptainRequest, opts ...grpc.CallOption) (*CaptainSummaryResponse, error)
	ListCaptains(ctx context.Context, in *ListCaptainsRequest, opts ...grpc.CallOption) (*ListCaptainsResponse, error)
}

type captainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptainServiceClient(cc grpc.ClientConnInterface) CaptainServiceClient {
	return &captainServiceClient{cc}
}

func (c *captainServiceClient) GetCaptain(ctx context.Context, in *CaptainRequest, opts ...grpc.CallOption) (*Captain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Captain)
	err := c.cc.Invoke(ctx, CaptainService_GetCaptain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captainServiceClient) GetCaptainSummary(ctx context.Context, in *CaptainRequest, opts ...grpc.CallOption) (*CaptainSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaptainSummaryResponse)
	err := c.cc.Invoke(ctx, CaptainService_GetCaptainSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captainServiceClient) ListCaptains(ctx context.Context, in *ListCaptainsRequest, opts ...grpc.CallOption) (*ListCaptainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCaptainsResponse)
	err := c.cc.Invoke(ctx, CaptainService_ListCaptains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptainServiceServer is the server API for CaptainService service.
// All implementations must embed UnimplementedCaptainServiceServer
// for forward compatibility.
type CaptainServiceServer interface {
	GetCaptain(context.Context, *CaptainRequest) (*Captain, error)
	GetCaptainSummary(context.Context, *CaptainRequest) (*CaptainSummaryResponse, error)
	ListCaptains(context.Context, *ListCaptainsRequest) (*ListCaptainsResponse, error)
	mustEmbedUnimplementedCaptainServiceServer()
}

// UnimplementedCaptainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaptainServiceServer struct{}

func (UnimplementedCaptainServiceServer) GetCaptain(context.Context, *CaptainRequest) (*Captain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptain not implemented")
}
func (UnimplementedCaptainServiceServer) GetCaptainSummary(context.Context, *CaptainRequest) (*CaptainSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptainSummary not implemented")
}
func (UnimplementedCaptainServiceServer) ListCaptains(context.Context, *ListCaptainsRequest) (*ListCaptainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCaptains not implemented")
}
func (UnimplementedCaptainServiceServer) mustEmbedUnimplementedCaptainServiceServer() {}
func (UnimplementedCaptainServiceServer) testEmbeddedByValue()                        {}

// UnsafeCaptainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptainServiceServer will
// result in compilation errors.
type UnsafeCaptainServiceServer interface {
	mustEmbedUnimplementedCaptainServiceServer()
}

func RegisterCaptainServiceServer(s grpc.ServiceRegistrar, srv CaptainServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaptainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaptainService_ServiceDesc, srv)
}

func _CaptainService_GetCaptain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptainServiceServer).GetCaptain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptainService_GetCaptain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptainServiceServer).GetCaptain(ctx, req.(*CaptainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptainService_GetCaptainSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptainServiceServer).GetCaptainSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptainService_GetCaptainSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptainServiceServer).GetCaptainSummary(ctx, req.(*CaptainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptainService_ListCaptains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCaptainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptainServiceServer).ListCaptains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptainService_ListCaptains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptainServiceServer).ListCaptains(ctx, req.(*ListCaptainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptainService_ServiceDesc is the grpc.ServiceDesc for CaptainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apfish.v1.ship.captain.CaptainService",
	HandlerType: (*CaptainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaptain",
			Handler:    _CaptainService_GetCaptain_Handler,
		},
		{
			MethodName: "GetCaptainSummary",
			Handler:    _CaptainService_GetCaptainSummary_Handler,
		},
		{
			MethodName: "ListCaptains",
			Handler:    _CaptainService_ListCaptains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish.v1/ship/captain/captain_service.proto",
}
