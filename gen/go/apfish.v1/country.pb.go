// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: apfish/country.proto

package apfishv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Country struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameRus        string                 `protobuf:"bytes,3,opt,name=name_rus,json=nameRus,proto3" json:"name_rus,omitempty"`
	Code           string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	IsIlo          bool                   `protobuf:"varint,5,opt,name=is_ilo,json=isIlo,proto3" json:"is_ilo,omitempty"`
	IsBallastWater bool                   `protobuf:"varint,6,opt,name=is_ballast_water,json=isBallastWater,proto3" json:"is_ballast_water,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CallSignFlag   *CallSignFlag          `protobuf:"bytes,8,opt,name=call_sign_flag,json=callSignFlag,proto3" json:"call_sign_flag,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_apfish_country_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_apfish_country_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_apfish_country_proto_rawDescGZIP(), []int{0}
}

func (x *Country) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetNameRus() string {
	if x != nil {
		return x.NameRus
	}
	return ""
}

func (x *Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Country) GetIsIlo() bool {
	if x != nil {
		return x.IsIlo
	}
	return false
}

func (x *Country) GetIsBallastWater() bool {
	if x != nil {
		return x.IsBallastWater
	}
	return false
}

func (x *Country) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Country) GetCallSignFlag() *CallSignFlag {
	if x != nil {
		return x.CallSignFlag
	}
	return nil
}

type CallSignFlag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryId     int64                  `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Series        string                 `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
	LimitLower    string                 `protobuf:"bytes,3,opt,name=limit_lower,json=limitLower,proto3" json:"limit_lower,omitempty"`
	LimitUpper    string                 `protobuf:"bytes,4,opt,name=limit_upper,json=limitUpper,proto3" json:"limit_upper,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallSignFlag) Reset() {
	*x = CallSignFlag{}
	mi := &file_apfish_country_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallSignFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSignFlag) ProtoMessage() {}

func (x *CallSignFlag) ProtoReflect() protoreflect.Message {
	mi := &file_apfish_country_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSignFlag.ProtoReflect.Descriptor instead.
func (*CallSignFlag) Descriptor() ([]byte, []int) {
	return file_apfish_country_proto_rawDescGZIP(), []int{1}
}

func (x *CallSignFlag) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *CallSignFlag) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CallSignFlag) GetLimitLower() string {
	if x != nil {
		return x.LimitLower
	}
	return ""
}

func (x *CallSignFlag) GetLimitUpper() string {
	if x != nil {
		return x.LimitUpper
	}
	return ""
}

func (x *CallSignFlag) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_apfish_country_proto protoreflect.FileDescriptor

const file_apfish_country_proto_rawDesc = "" +
	"\n" +
	"\x14apfish/country.proto\x12\acountry\x1a\x1fgoogle/protobuf/timestamp.proto\"\x95\x02\n" +
	"\aCountry\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bname_rus\x18\x03 \x01(\tR\anameRus\x12\x12\n" +
	"\x04code\x18\x04 \x01(\tR\x04code\x12\x15\n" +
	"\x06is_ilo\x18\x05 \x01(\bR\x05isIlo\x12(\n" +
	"\x10is_ballast_water\x18\x06 \x01(\bR\x0eisBallastWater\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12;\n" +
	"\x0ecall_sign_flag\x18\b \x01(\v2\x15.country.CallSignFlagR\fcallSignFlag\"\xc2\x01\n" +
	"\fCallSignFlag\x12\x1d\n" +
	"\n" +
	"country_id\x18\x01 \x01(\x03R\tcountryId\x12\x16\n" +
	"\x06series\x18\x02 \x01(\tR\x06series\x12\x1f\n" +
	"\vlimit_lower\x18\x03 \x01(\tR\n" +
	"limitLower\x12\x1f\n" +
	"\vlimit_upper\x18\x04 \x01(\tR\n" +
	"limitUpper\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAtB\x14Z\x12apfish.v1;apfishv1b\x06proto3"

var (
	file_apfish_country_proto_rawDescOnce sync.Once
	file_apfish_country_proto_rawDescData []byte
)

func file_apfish_country_proto_rawDescGZIP() []byte {
	file_apfish_country_proto_rawDescOnce.Do(func() {
		file_apfish_country_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_apfish_country_proto_rawDesc), len(file_apfish_country_proto_rawDesc)))
	})
	return file_apfish_country_proto_rawDescData
}

var file_apfish_country_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_apfish_country_proto_goTypes = []any{
	(*Country)(nil),               // 0: country.Country
	(*CallSignFlag)(nil),          // 1: country.CallSignFlag
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_apfish_country_proto_depIdxs = []int32{
	2, // 0: country.Country.created_at:type_name -> google.protobuf.Timestamp
	1, // 1: country.Country.call_sign_flag:type_name -> country.CallSignFlag
	2, // 2: country.CallSignFlag.created_at:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_apfish_country_proto_init() }
func file_apfish_country_proto_init() {
	if File_apfish_country_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_apfish_country_proto_rawDesc), len(file_apfish_country_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apfish_country_proto_goTypes,
		DependencyIndexes: file_apfish_country_proto_depIdxs,
		MessageInfos:      file_apfish_country_proto_msgTypes,
	}.Build()
	File_apfish_country_proto = out.File
	file_apfish_country_proto_goTypes = nil
	file_apfish_country_proto_depIdxs = nil
}
