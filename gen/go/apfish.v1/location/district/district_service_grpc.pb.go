// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish.v1/location/district/district_service.proto

package location_district

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistrictService_GetDistrict_FullMethodName        = "/apfish.v1.location.district.DistrictService/GetDistrict"
	DistrictService_GetDistrictSummary_FullMethodName = "/apfish.v1.location.district.DistrictService/GetDistrictSummary"
	DistrictService_ListDistricts_FullMethodName      = "/apfish.v1.location.district.DistrictService/ListDistricts"
)

// DistrictServiceClient is the client API for DistrictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistrictServiceClient interface {
	GetDistrict(ctx context.Context, in *DistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error)
	GetDistrictSummary(ctx context.Context, in *DistrictRequest, opts ...grpc.CallOption) (*DistrictSummaryResponse, error)
	ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error)
}

type districtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistrictServiceClient(cc grpc.ClientConnInterface) DistrictServiceClient {
	return &districtServiceClient{cc}
}

func (c *districtServiceClient) GetDistrict(ctx context.Context, in *DistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistrictResponse)
	err := c.cc.Invoke(ctx, DistrictService_GetDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) GetDistrictSummary(ctx context.Context, in *DistrictRequest, opts ...grpc.CallOption) (*DistrictSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistrictSummaryResponse)
	err := c.cc.Invoke(ctx, DistrictService_GetDistrictSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDistrictsResponse)
	err := c.cc.Invoke(ctx, DistrictService_ListDistricts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistrictServiceServer is the server API for DistrictService service.
// All implementations must embed UnimplementedDistrictServiceServer
// for forward compatibility.
type DistrictServiceServer interface {
	GetDistrict(context.Context, *DistrictRequest) (*DistrictResponse, error)
	GetDistrictSummary(context.Context, *DistrictRequest) (*DistrictSummaryResponse, error)
	ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error)
	mustEmbedUnimplementedDistrictServiceServer()
}

// UnimplementedDistrictServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistrictServiceServer struct{}

func (UnimplementedDistrictServiceServer) GetDistrict(context.Context, *DistrictRequest) (*DistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrict not implemented")
}
func (UnimplementedDistrictServiceServer) GetDistrictSummary(context.Context, *DistrictRequest) (*DistrictSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrictSummary not implemented")
}
func (UnimplementedDistrictServiceServer) ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (UnimplementedDistrictServiceServer) mustEmbedUnimplementedDistrictServiceServer() {}
func (UnimplementedDistrictServiceServer) testEmbeddedByValue()                         {}

// UnsafeDistrictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistrictServiceServer will
// result in compilation errors.
type UnsafeDistrictServiceServer interface {
	mustEmbedUnimplementedDistrictServiceServer()
}

func RegisterDistrictServiceServer(s grpc.ServiceRegistrar, srv DistrictServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistrictServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistrictService_ServiceDesc, srv)
}

func _DistrictService_GetDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).GetDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistrictService_GetDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).GetDistrict(ctx, req.(*DistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_GetDistrictSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).GetDistrictSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistrictService_GetDistrictSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).GetDistrictSummary(ctx, req.(*DistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistrictService_ListDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).ListDistricts(ctx, req.(*ListDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistrictService_ServiceDesc is the grpc.ServiceDesc for DistrictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistrictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apfish.v1.location.district.DistrictService",
	HandlerType: (*DistrictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDistrict",
			Handler:    _DistrictService_GetDistrict_Handler,
		},
		{
			MethodName: "GetDistrictSummary",
			Handler:    _DistrictService_GetDistrictSummary_Handler,
		},
		{
			MethodName: "ListDistricts",
			Handler:    _DistrictService_ListDistricts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish.v1/location/district/district_service.proto",
}
