// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish.v1/location/authority/authority_service.proto

package location_authority

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorityService_GetAuthority_FullMethodName        = "/apfish.v1.location.authority.AuthorityService/GetAuthority"
	AuthorityService_GetAuthoritySummary_FullMethodName = "/apfish.v1.location.authority.AuthorityService/GetAuthoritySummary"
	AuthorityService_ListAuthorities_FullMethodName     = "/apfish.v1.location.authority.AuthorityService/ListAuthorities"
)

// AuthorityServiceClient is the client API for AuthorityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityServiceClient interface {
	GetAuthority(ctx context.Context, in *AuthorityRequest, opts ...grpc.CallOption) (*Authority, error)
	GetAuthoritySummary(ctx context.Context, in *AuthorityRequest, opts ...grpc.CallOption) (*AuthoritySummaryResponse, error)
	ListAuthorities(ctx context.Context, in *ListAuthoritiesRequest, opts ...grpc.CallOption) (*ListAuthoritiesResponse, error)
}

type authorityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityServiceClient(cc grpc.ClientConnInterface) AuthorityServiceClient {
	return &authorityServiceClient{cc}
}

func (c *authorityServiceClient) GetAuthority(ctx context.Context, in *AuthorityRequest, opts ...grpc.CallOption) (*Authority, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authority)
	err := c.cc.Invoke(ctx, AuthorityService_GetAuthority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetAuthoritySummary(ctx context.Context, in *AuthorityRequest, opts ...grpc.CallOption) (*AuthoritySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthoritySummaryResponse)
	err := c.cc.Invoke(ctx, AuthorityService_GetAuthoritySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) ListAuthorities(ctx context.Context, in *ListAuthoritiesRequest, opts ...grpc.CallOption) (*ListAuthoritiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthoritiesResponse)
	err := c.cc.Invoke(ctx, AuthorityService_ListAuthorities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServiceServer is the server API for AuthorityService service.
// All implementations must embed UnimplementedAuthorityServiceServer
// for forward compatibility.
type AuthorityServiceServer interface {
	GetAuthority(context.Context, *AuthorityRequest) (*Authority, error)
	GetAuthoritySummary(context.Context, *AuthorityRequest) (*AuthoritySummaryResponse, error)
	ListAuthorities(context.Context, *ListAuthoritiesRequest) (*ListAuthoritiesResponse, error)
	mustEmbedUnimplementedAuthorityServiceServer()
}

// UnimplementedAuthorityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorityServiceServer struct{}

func (UnimplementedAuthorityServiceServer) GetAuthority(context.Context, *AuthorityRequest) (*Authority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthority not implemented")
}
func (UnimplementedAuthorityServiceServer) GetAuthoritySummary(context.Context, *AuthorityRequest) (*AuthoritySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthoritySummary not implemented")
}
func (UnimplementedAuthorityServiceServer) ListAuthorities(context.Context, *ListAuthoritiesRequest) (*ListAuthoritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorities not implemented")
}
func (UnimplementedAuthorityServiceServer) mustEmbedUnimplementedAuthorityServiceServer() {}
func (UnimplementedAuthorityServiceServer) testEmbeddedByValue()                          {}

// UnsafeAuthorityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServiceServer will
// result in compilation errors.
type UnsafeAuthorityServiceServer interface {
	mustEmbedUnimplementedAuthorityServiceServer()
}

func RegisterAuthorityServiceServer(s grpc.ServiceRegistrar, srv AuthorityServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorityService_ServiceDesc, srv)
}

func _AuthorityService_GetAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorityService_GetAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetAuthority(ctx, req.(*AuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetAuthoritySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetAuthoritySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorityService_GetAuthoritySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetAuthoritySummary(ctx, req.(*AuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_ListAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthoritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).ListAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorityService_ListAuthorities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).ListAuthorities(ctx, req.(*ListAuthoritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorityService_ServiceDesc is the grpc.ServiceDesc for AuthorityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apfish.v1.location.authority.AuthorityService",
	HandlerType: (*AuthorityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthority",
			Handler:    _AuthorityService_GetAuthority_Handler,
		},
		{
			MethodName: "GetAuthoritySummary",
			Handler:    _AuthorityService_GetAuthoritySummary_Handler,
		},
		{
			MethodName: "ListAuthorities",
			Handler:    _AuthorityService_ListAuthorities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish.v1/location/authority/authority_service.proto",
}
