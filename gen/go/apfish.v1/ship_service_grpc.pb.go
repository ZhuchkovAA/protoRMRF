// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish/ship/ship/ship_service.proto

package apfishv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShipService_GetShip_FullMethodName        = "/ship.ShipService/GetShip"
	ShipService_GetShipSummary_FullMethodName = "/ship.ShipService/GetShipSummary"
	ShipService_ListShips_FullMethodName      = "/ship.ShipService/ListShips"
)

// ShipServiceClient is the client API for ShipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipServiceClient interface {
	GetShip(ctx context.Context, in *ShipRequest, opts ...grpc.CallOption) (*ShipResponse, error)
	GetShipSummary(ctx context.Context, in *ShipRequest, opts ...grpc.CallOption) (*ShipSummaryResponse, error)
	ListShips(ctx context.Context, in *ListShipsRequest, opts ...grpc.CallOption) (*ListShipsResponse, error)
}

type shipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipServiceClient(cc grpc.ClientConnInterface) ShipServiceClient {
	return &shipServiceClient{cc}
}

func (c *shipServiceClient) GetShip(ctx context.Context, in *ShipRequest, opts ...grpc.CallOption) (*ShipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipResponse)
	err := c.cc.Invoke(ctx, ShipService_GetShip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipServiceClient) GetShipSummary(ctx context.Context, in *ShipRequest, opts ...grpc.CallOption) (*ShipSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipSummaryResponse)
	err := c.cc.Invoke(ctx, ShipService_GetShipSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipServiceClient) ListShips(ctx context.Context, in *ListShipsRequest, opts ...grpc.CallOption) (*ListShipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShipsResponse)
	err := c.cc.Invoke(ctx, ShipService_ListShips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipServiceServer is the server API for ShipService service.
// All implementations must embed UnimplementedShipServiceServer
// for forward compatibility.
type ShipServiceServer interface {
	GetShip(context.Context, *ShipRequest) (*ShipResponse, error)
	GetShipSummary(context.Context, *ShipRequest) (*ShipSummaryResponse, error)
	ListShips(context.Context, *ListShipsRequest) (*ListShipsResponse, error)
	mustEmbedUnimplementedShipServiceServer()
}

// UnimplementedShipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShipServiceServer struct{}

func (UnimplementedShipServiceServer) GetShip(context.Context, *ShipRequest) (*ShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShip not implemented")
}
func (UnimplementedShipServiceServer) GetShipSummary(context.Context, *ShipRequest) (*ShipSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipSummary not implemented")
}
func (UnimplementedShipServiceServer) ListShips(context.Context, *ListShipsRequest) (*ListShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShips not implemented")
}
func (UnimplementedShipServiceServer) mustEmbedUnimplementedShipServiceServer() {}
func (UnimplementedShipServiceServer) testEmbeddedByValue()                     {}

// UnsafeShipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipServiceServer will
// result in compilation errors.
type UnsafeShipServiceServer interface {
	mustEmbedUnimplementedShipServiceServer()
}

func RegisterShipServiceServer(s grpc.ServiceRegistrar, srv ShipServiceServer) {
	// If the following call pancis, it indicates UnimplementedShipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShipService_ServiceDesc, srv)
}

func _ShipService_GetShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipServiceServer).GetShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipService_GetShip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipServiceServer).GetShip(ctx, req.(*ShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipService_GetShipSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipServiceServer).GetShipSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipService_GetShipSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipServiceServer).GetShipSummary(ctx, req.(*ShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipService_ListShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipServiceServer).ListShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShipService_ListShips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipServiceServer).ListShips(ctx, req.(*ListShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShipService_ServiceDesc is the grpc.ServiceDesc for ShipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ship.ShipService",
	HandlerType: (*ShipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShip",
			Handler:    _ShipService_GetShip_Handler,
		},
		{
			MethodName: "GetShipSummary",
			Handler:    _ShipService_GetShipSummary_Handler,
		},
		{
			MethodName: "ListShips",
			Handler:    _ShipService_ListShips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish/ship/ship/ship_service.proto",
}
