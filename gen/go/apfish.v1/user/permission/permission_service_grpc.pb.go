// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish.v1/user/permission/permission_service.proto

package user_permission

import (
	context "context"
	helper "github.com/ZhuchkovAA/protoRMRF/gen/go/apfish.v1/helper"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserPermissionService_ListUserPermissions_FullMethodName = "/apfish.v1.user.permission.UserPermissionService/ListUserPermissions"
	UserPermissionService_AssignPermissions_FullMethodName   = "/apfish.v1.user.permission.UserPermissionService/AssignPermissions"
)

// UserPermissionServiceClient is the client API for UserPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPermissionServiceClient interface {
	ListUserPermissions(ctx context.Context, in *ListUserPermissionRequest, opts ...grpc.CallOption) (*ListUserPermissionResponse, error)
	AssignPermissions(ctx context.Context, in *AssignPermissionsRequest, opts ...grpc.CallOption) (*helper.SuccessResponse, error)
}

type userPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermissionServiceClient(cc grpc.ClientConnInterface) UserPermissionServiceClient {
	return &userPermissionServiceClient{cc}
}

func (c *userPermissionServiceClient) ListUserPermissions(ctx context.Context, in *ListUserPermissionRequest, opts ...grpc.CallOption) (*ListUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermissionResponse)
	err := c.cc.Invoke(ctx, UserPermissionService_ListUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionServiceClient) AssignPermissions(ctx context.Context, in *AssignPermissionsRequest, opts ...grpc.CallOption) (*helper.SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(helper.SuccessResponse)
	err := c.cc.Invoke(ctx, UserPermissionService_AssignPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermissionServiceServer is the server API for UserPermissionService service.
// All implementations must embed UnimplementedUserPermissionServiceServer
// for forward compatibility.
type UserPermissionServiceServer interface {
	ListUserPermissions(context.Context, *ListUserPermissionRequest) (*ListUserPermissionResponse, error)
	AssignPermissions(context.Context, *AssignPermissionsRequest) (*helper.SuccessResponse, error)
	mustEmbedUnimplementedUserPermissionServiceServer()
}

// UnimplementedUserPermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserPermissionServiceServer struct{}

func (UnimplementedUserPermissionServiceServer) ListUserPermissions(context.Context, *ListUserPermissionRequest) (*ListUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPermissions not implemented")
}
func (UnimplementedUserPermissionServiceServer) AssignPermissions(context.Context, *AssignPermissionsRequest) (*helper.SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissions not implemented")
}
func (UnimplementedUserPermissionServiceServer) mustEmbedUnimplementedUserPermissionServiceServer() {}
func (UnimplementedUserPermissionServiceServer) testEmbeddedByValue()                               {}

// UnsafeUserPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermissionServiceServer will
// result in compilation errors.
type UnsafeUserPermissionServiceServer interface {
	mustEmbedUnimplementedUserPermissionServiceServer()
}

func RegisterUserPermissionServiceServer(s grpc.ServiceRegistrar, srv UserPermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserPermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserPermissionService_ServiceDesc, srv)
}

func _UserPermissionService_ListUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).ListUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermissionService_ListUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).ListUserPermissions(ctx, req.(*ListUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissionService_AssignPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).AssignPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermissionService_AssignPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).AssignPermissions(ctx, req.(*AssignPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermissionService_ServiceDesc is the grpc.ServiceDesc for UserPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apfish.v1.user.permission.UserPermissionService",
	HandlerType: (*UserPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserPermissions",
			Handler:    _UserPermissionService_ListUserPermissions_Handler,
		},
		{
			MethodName: "AssignPermissions",
			Handler:    _UserPermissionService_AssignPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish.v1/user/permission/permission_service.proto",
}
