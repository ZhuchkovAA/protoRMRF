// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apfish.v1/call_sign/call_sign_service.proto

package call_sign

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CallSignService_GetCallSign_FullMethodName        = "/apfish.v1.call_sign.CallSignService/GetCallSign"
	CallSignService_GetCallSignSummary_FullMethodName = "/apfish.v1.call_sign.CallSignService/GetCallSignSummary"
	CallSignService_ListCallSigns_FullMethodName      = "/apfish.v1.call_sign.CallSignService/ListCallSigns"
)

// CallSignServiceClient is the client API for CallSignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallSignServiceClient interface {
	GetCallSign(ctx context.Context, in *CallSignRequest, opts ...grpc.CallOption) (*CallSign, error)
	GetCallSignSummary(ctx context.Context, in *CallSignRequest, opts ...grpc.CallOption) (*CallSignSummaryResponse, error)
	ListCallSigns(ctx context.Context, in *ListCallSignsRequest, opts ...grpc.CallOption) (*ListCallSignsResponse, error)
}

type callSignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallSignServiceClient(cc grpc.ClientConnInterface) CallSignServiceClient {
	return &callSignServiceClient{cc}
}

func (c *callSignServiceClient) GetCallSign(ctx context.Context, in *CallSignRequest, opts ...grpc.CallOption) (*CallSign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallSign)
	err := c.cc.Invoke(ctx, CallSignService_GetCallSign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callSignServiceClient) GetCallSignSummary(ctx context.Context, in *CallSignRequest, opts ...grpc.CallOption) (*CallSignSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallSignSummaryResponse)
	err := c.cc.Invoke(ctx, CallSignService_GetCallSignSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callSignServiceClient) ListCallSigns(ctx context.Context, in *ListCallSignsRequest, opts ...grpc.CallOption) (*ListCallSignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCallSignsResponse)
	err := c.cc.Invoke(ctx, CallSignService_ListCallSigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallSignServiceServer is the server API for CallSignService service.
// All implementations must embed UnimplementedCallSignServiceServer
// for forward compatibility.
type CallSignServiceServer interface {
	GetCallSign(context.Context, *CallSignRequest) (*CallSign, error)
	GetCallSignSummary(context.Context, *CallSignRequest) (*CallSignSummaryResponse, error)
	ListCallSigns(context.Context, *ListCallSignsRequest) (*ListCallSignsResponse, error)
	mustEmbedUnimplementedCallSignServiceServer()
}

// UnimplementedCallSignServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCallSignServiceServer struct{}

func (UnimplementedCallSignServiceServer) GetCallSign(context.Context, *CallSignRequest) (*CallSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallSign not implemented")
}
func (UnimplementedCallSignServiceServer) GetCallSignSummary(context.Context, *CallSignRequest) (*CallSignSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallSignSummary not implemented")
}
func (UnimplementedCallSignServiceServer) ListCallSigns(context.Context, *ListCallSignsRequest) (*ListCallSignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallSigns not implemented")
}
func (UnimplementedCallSignServiceServer) mustEmbedUnimplementedCallSignServiceServer() {}
func (UnimplementedCallSignServiceServer) testEmbeddedByValue()                         {}

// UnsafeCallSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallSignServiceServer will
// result in compilation errors.
type UnsafeCallSignServiceServer interface {
	mustEmbedUnimplementedCallSignServiceServer()
}

func RegisterCallSignServiceServer(s grpc.ServiceRegistrar, srv CallSignServiceServer) {
	// If the following call pancis, it indicates UnimplementedCallSignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CallSignService_ServiceDesc, srv)
}

func _CallSignService_GetCallSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallSignServiceServer).GetCallSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallSignService_GetCallSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallSignServiceServer).GetCallSign(ctx, req.(*CallSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallSignService_GetCallSignSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallSignServiceServer).GetCallSignSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallSignService_GetCallSignSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallSignServiceServer).GetCallSignSummary(ctx, req.(*CallSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallSignService_ListCallSigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallSignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallSignServiceServer).ListCallSigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallSignService_ListCallSigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallSignServiceServer).ListCallSigns(ctx, req.(*ListCallSignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallSignService_ServiceDesc is the grpc.ServiceDesc for CallSignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallSignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apfish.v1.call_sign.CallSignService",
	HandlerType: (*CallSignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCallSign",
			Handler:    _CallSignService_GetCallSign_Handler,
		},
		{
			MethodName: "GetCallSignSummary",
			Handler:    _CallSignService_GetCallSignSummary_Handler,
		},
		{
			MethodName: "ListCallSigns",
			Handler:    _CallSignService_ListCallSigns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apfish.v1/call_sign/call_sign_service.proto",
}
